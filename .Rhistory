)
## Figure 2.6
ggpairs(gr_total_seleted[c(3, 6, 20)]) + theme_bw() +
theme(
axis.text.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks = element_blank()
)
## Figure 2.7
ggpairs(gr_total_seleted[c(3, 8, 10)]) + theme_bw() +
theme(
axis.text.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks = element_blank()
)
exposure_plot <- ggplot(gr_total, aes(x = Exposure)) +
geom_histogram(binwidth = 1, fill = "darkgrey",
color = "black", alpha = 0.7) +
labs(
title = "",
x = "Exposure",
y = "Frequency"
) +
ylim(0,400) +
theme_bw()
heated_plot <- ggplot(gr_total, aes(x = Heated)) +
geom_histogram(binwidth = 1, fill = "darkgrey",
color = "black", alpha = 0.7) +
labs(
title = "",
x = "Heated",
y = NULL
) +
scale_x_continuous(breaks = seq(0, 1, 1)) +
theme_bw() +
ylim(0,400) +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank()
)
insulated_plot <- ggplot(gr_total, aes(x = Insulated)) +
geom_histogram(binwidth = 1, fill = "darkgrey",
color = "black", alpha = 0.7) +
labs(
title = "",
x = "Insulated",
y = "Frequency"
) +
scale_x_continuous(breaks = seq(0, 1, 1)) +
ylim(0,400) +
theme_bw()
parapet_plot <- ggplot(gr_total, aes(x = Parapet)) +
geom_histogram(binwidth = 1, fill = "darkgrey",
color = "black", alpha = 0.7) +
labs(
title = "",
x = "Parapet",
y = NULL
) +
scale_x_continuous(breaks = seq(0, 1, 1)) +
theme_bw()+
ylim(0,400) +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank()
)
## Figure 2.8
gridExtra::grid.arrange(exposure_plot, heated_plot, insulated_plot,
parapet_plot,
ncol = 2,
widths = c(54,46)
)
##################### Adding mapped wind ####################################
gr_total$lat <- round(gr_total$lat * 4) / 4
gr_total$long <- round(gr_total$long * 4) / 4
whole_map <- terra::unwrap(readRDS("D:/whole_map.rds"))
whole_map
gr_total$est_wind <- terra::extract(
whole_map,
terra::vect(
matrix(
c(
gr_total$long,
gr_total$lat
),
ncol = 2
),
crs = terra::crs(whole_map)
)
)[[2]]
### version 1 of data
# write.csv(gr_total, "data-raw//wind_all.csv")
###############################################################################
### adding mapped average wind #####
wind_avg_map <- terra::unwrap(readRDS("D:/wind_avg_map.rds"))
wind_avg_map
gr_total$est_wind_avg <- terra::extract(
wind_avg_map,
terra::vect(
matrix(
c(
gr_total$long,
gr_total$lat
),
ncol = 2
),
crs = terra::crs(wind_avg_map)
)
)[[2]]
#### adding mapped average temp
temp_avg_map <- terra::unwrap(readRDS("D:/temp_avg_map.rds"))
temp_avg_map
gr_total$est_temp_avg <- terra::extract(
temp_avg_map,
terra::vect(
matrix(
c(
gr_total$long,
gr_total$lat
),
ncol = 2
),
crs = terra::crs(temp_avg_map)
)
)[[2]]
gr_total$slope15 <- ifelse(gr_total$Slope > 15, 1, 0)
gr_total$exposed <- ifelse(gr_total$Exposure == 2, 1, 0)
gr_total$sheltered <- ifelse(gr_total$Exposure == 0, 1, 0)
## kelvin to celcius
gr_total$est_temp_avg <- gr_total$est_temp_avg - 273.15
## adding alters slope15
gr_total$slope_1_15 <- ifelse(gr_total$slope15 == 1 & gr_total$roofflat == 0,
1, 0
)
## Scatters of Canadian data vs ERA 5 data
wind_avg_scat <- ggplot(gr_total, aes(x = wind_avg, y = est_wind_avg)) +
geom_point() +
labs(
title = "",
x = "Canadian Average wind",
y = "Gridded average wind"
) +
xlim(3, 15) +
ylim(3, 15) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +
theme_bw()
w2_scat <- ggplot(gr_total, aes(x = winter_wind_all, y = est_wind)) +
geom_point() +
labs(
title = "",
x = "Canadian W2",
y = "Gridded W2"
) +
xlim(0, 1) +
ylim(0, 1) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +
theme_bw()
temp_avg_scat <- ggplot(gr_total, aes(x = temp_avg, y = est_temp_avg)) +
geom_point() +
labs(
title = "",
x = "Canadian Average temp",
y = "Gridded average temp"
) +
xlim(-25, 5) +
ylim(-25, 5) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "blue") +
theme_bw()
## Figure 2.9
gridExtra::grid.arrange(wind_avg_scat, w2_scat, temp_avg_scat, ncol = 3)
library(glmnet)
library(GGally)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(car)
library(cowplot)
library(RColorBrewer)
library(partykit)
## Modeling work. This shows what was done to create the models used in the
# Thesis
# version 2 of data
gr_total <- read.csv("data-raw//updated_data.csv")
null_model <- lm(sqrtgr ~ 1, gr_total)
summary(null_model)
## running models with wind
model1 <- lm(sqrtgr ~ logground, gr_total)
model2 <- lm(sqrtgr ~ logground + winter_wind, gr_total)
model3 <- lm(sqrtgr ~ logground + winter_wind_all, gr_total)
model4 <- lm(sqrtgr ~ logground + winter_wind_3month, gr_total)
model5 <- lm(sqrtgr ~ logground + winter_wind_snow, gr_total)
## Equation 3.1
summary(model1)
## Table 3.1
summary(model2)
# eq 3.2
summary(model3)
summary(model4)
summary(model5)
# Figure 3.1
ggplot(gr_total[gr_total$gr <= 2, ], aes(x = logground, y = sqrtgr)) +
geom_point() +
labs(
title = "",
x = "log ground snow load",
y = expression(sqrt(g[r]))
) +
geom_smooth(method = "lm", se = FALSE, linewidth = 1.5) +
geom_segment(aes(x = min(logground), y = min(logground) * -0.12 + 0.63,
xend = 0.87, yend = 0.87 * -0.12 + 0.63),
color = "#d95f02", linewidth = 1.5) +
geom_segment(aes(x = 0.87, y = 0.87 * -0.12 + 0.63, xend = max(logground),
yend = 0.87 * -0.12 + 0.63),
color = "#d95f02", linewidth = 1.5) +
scale_color_brewer(palette = "Dark2") +
theme_bw() +
theme(
axis.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 12, face = "bold")
)
### Now running model with ERA5 wind
model_grid <- lm(sqrtgr ~ logground + est_wind, gr_total)
## Eq. 3.3
summary(model_grid)
## obtaining resids from original model
gr_total$resid <- residuals(model1)
resid_data <- gr_total |> dplyr::select(
wind_avg, temp_avg, Slope,
roofflat, Size, exposed, sheltered, Heated,
Insulated, Parapet, winter_wind_all,
above_freeze_all, slope15, resid
)
resid_no_na <- na.omit(resid_data)
### Creating tree to look for interactions
tree <- rpart(formula = resid ~ ., data = resid_no_na)
prp(tree)
pruned_tree <- prune(tree, cp = 0.04)
# Plot the tree
# fig 3.2
prp(pruned_tree)
## Setting up
## Starts as all variables, plus interactions
resid_all <- lm(
resid ~ . + roofflat * winter_wind_all + roofflat * wind_avg +
roofflat * sheltered + slope15 * winter_wind_all +
slope15 * wind_avg + slope15 * sheltered,
resid_no_na
)
resid_int <- lm(resid ~ 1, resid_no_na)
## Running forward and backward regression
resid_forward <- step(resid_int,
direction = "both", scope = formula(resid_all),
trace = 1
)
resid_backward <- step(resid_all,
direction = "both", scope = formula(resid_all),
trace = 1
)
summary(resid_forward)
summary(resid_backward)
## Running Lasso regression here
## Adding interaction columns to resid_no_na
resid_no_na$w2rf <- resid_no_na$winter_wind_all * resid_no_na$roofflat
resid_no_na$warf <- resid_no_na$wind_avg * resid_no_na$roofflat
resid_no_na$shrf <- resid_no_na$sheltered * resid_no_na$roofflat
colnames(resid_no_na)
y <- resid_no_na$resid
x <- data.matrix(resid_no_na[, c(1:12, 15:17)])
cv_model <- cv.glmnet(x, y, alpha = 1)
best_lambda <- cv_model$lambda.min
best_lambda
best_model <- glmnet(x, y, alpha = 1, lambda = best_lambda)
coef(best_model)
remove_model <- glmnet(x, y, alpha = 1, lambda = 0.002)
coef(remove_model)
cv_model2 <- cv.glmnet(x, y, alpha = 0.5)
best_lambda2 <- cv_model2$lambda.min
best_lambda2
best_model2 <- glmnet(x, y, alpha = 0.5, lambda = best_lambda2)
coef(best_model2)
################################################################################
#Density plots of each exposure level with GR
## Fig 3.2
ggplot(na.omit(gr_total[,c("Exposure", "sqrtgr")]),
aes(x = sqrtgr, color = factor(Exposure,
levels = unique(gr_total$Exposure),
labels =
c("exposed", "sheltered", "normal")))) +
geom_density(alpha = 0.5, linewidth = 1) +
labs(
x = expression(sqrt(g[r])),
y = "Density",
fill = "Exposure") +
theme_bw() +
scale_color_brewer(palette = "Dark2", name = "Exposure")  +
theme(legend.position = c(0.9, 0.8))
#Density plots of sheltered level with GR
ggplot(na.omit(gr_total[,c("sheltered", "sqrtgr")]),
aes(x = sqrtgr, color = factor(sheltered))) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of sqrtgr by Exposure Level",
x = "sqrtgr",
y = "Density",
fill = "Exposure") +
theme_bw()
###############################################################################
## Setting up, drop exposed and slope15, add back Slope and wind_avg to check
resid_all2 <- lm(
resid ~ roofflat + sheltered + winter_wind_all + Slope + wind_avg +
temp_avg + above_freeze_all + Size + Parapet +
Heated + Insulated  + roofflat:winter_wind_all +
roofflat:sheltered,
resid_no_na
)
resid_int <- lm(resid ~ 1, resid_no_na)
## Running forward and backward regression
resid_forward2 <- step(resid_int,
direction = "both", scope = formula(resid_all2),
trace = 1
)
resid_backward2 <- step(resid_all2,
direction = "both", scope = formula(resid_all2),
trace = 1
)
summary(resid_forward2)
summary(resid_backward2)
################################################################################
################################################################################
# looking at correlations
gr_vars <- gr_total |> dplyr::select(
sqrtgr, logground, roofflat, sheltered,
winter_wind_all, temp_avg,
above_freeze_all, Size, Parapet
)
ggpairs(na.omit(gr_vars))
################################### Checking assumptions of liner fit #########
######################## plot side by side  ##################################
df <- structure(list(var1 = 1:5, var2 = 4:8, var3 = 6:10),
.Names = c("var1", "var2", "var3"),
row.names = c(NA, -5L), class = "data.frame"
)
non_weather_cont <- ggpairs(gr_total |> dplyr::select(
sqrtgr,
logground, logsize
)) + theme_bw() +
theme(
axis.text.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks = element_blank()
)
weather_cont <- ggpairs(gr_total |> dplyr::select(
sqrtgr, winter_wind_all, temp_avg,
above_freeze_all
)) + theme_bw() +
theme(
axis.text.y = element_blank(),
axis.text.x = element_blank(),
axis.ticks = element_blank()
)
## Fig 3.4
cowplot::plot_grid(
GGally::ggmatrix_gtable(non_weather_cont),
GGally::ggmatrix_gtable(weather_cont),
nrow = 2,
rel_heights = c(4, 6)
)
## running model to fit assumption of linear fit
mod1 <- lm(sqrtgr ~ logground + roofflat + sheltered + winter_wind_all +
temp_avg + above_freeze_all + logsize + Parapet +
roofflat:winter_wind_all + roofflat:sheltered, gr_total)
summary(mod1)
######################## Residual and QQ plot ################################
## Fig 3.5
resid_gg <- ggplot(mod1, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0) +
labs(x = "Fitted Values", y = "Residuals") +
theme_bw() +
theme(
axis.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 14, face = "bold")
)
residuals <- resid(mod1)
qq_data <- qqplot(qnorm(ppoints(length(residuals))), residuals)
# Convert the output of qqplot to a data frame
qq_data_df <- data.frame(Theoretical = qq_data$x, Residuals = qq_data$y)
# Plot the QQ plot using ggplot2
## Fig 3.5
qq_gg <- ggplot(qq_data_df, aes(x = Theoretical, y = Residuals)) +
geom_point() +
geom_abline(intercept = mean(residuals), slope = sd(residuals)) +
labs(x = "Theoretical Quantiles", y = "Residuals") +
theme_bw() +
theme(
axis.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 14, face = "bold")
)
gridExtra::grid.arrange(resid_gg, qq_gg, ncol = 2)
shapiro.test(mod1$residuals)
## Trying with temp_avg
mod2 <- lm(sqrtgr ~ logground + roofflat + sheltered + winter_wind_all +
temp_avg +  logsize + Parapet +
roofflat:winter_wind_all + roofflat:sheltered, gr_total)
## Trying with above_freeze_all
mod3 <- lm(sqrtgr ~ logground + roofflat + sheltered + winter_wind_all +
above_freeze_all + logsize + Parapet +
roofflat:winter_wind_all + roofflat:sheltered, gr_total)
###############################################################################
######################## Residual and QQ plot other models ####################
resid_gg2 <- ggplot(mod2, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0) +
labs(x = "Fitted Values", y = "Residuals") +
theme_bw() +
theme(
axis.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 14, face = "bold")
)
residuals2 <- resid(mod2)
qq_data2 <- qqplot(qnorm(ppoints(length(residuals2))), residuals2)
# Convert the output of qqplot to a data frame
qq_data_df2 <- data.frame(Theoretical = qq_data2$x, Residuals = qq_data2$y)
# Plot the QQ plot using ggplot2
qq_gg2 <- ggplot(qq_data_df2, aes(x = Theoretical, y = Residuals)) +
geom_point() +
geom_abline(intercept = mean(residuals), slope = sd(residuals)) +
labs(x = "Theoretical Quantiles", y = "Residuals") +
theme_bw() +
theme(
axis.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 14, face = "bold")
)
gridExtra::grid.arrange(resid_gg2, qq_gg2, ncol = 2)
shapiro.test(mod2$residuals)
########################### mod3 ##############################################
resid_gg3 <- ggplot(mod3, aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0) +
labs(x = "Fitted Values", y = "Residuals") +
theme_bw() +
theme(
axis.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 14, face = "bold")
)
residuals3 <- resid(mod3)
qq_data3 <- qqplot(qnorm(ppoints(length(residuals3))), residuals3)
# Convert the output of qqplot to a data frame
qq_data_df3 <- data.frame(Theoretical = qq_data3$x, Residuals = qq_data3$y)
# Plot the QQ plot using ggplot3
qq_gg3 <- ggplot(qq_data_df3, aes(x = Theoretical, y = Residuals)) +
geom_point() +
geom_abline(intercept = mean(residuals), slope = sd(residuals)) +
labs(x = "Theoretical Quantiles", y = "Residuals") +
theme_bw() +
theme(
axis.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 14, face = "bold")
)
gridExtra::grid.arrange(resid_gg3, qq_gg3, ncol = 2)
shapiro.test(mod3$residuals)
################################################################################
## Table 3.5
summary(mod1)
# Eq. 3.6
summary(mod2)
summary(mod3)
################################ building only model ###########################
building_data <- gr_total |> dplyr::select(
sqrtgr,
logground, logsize, Parapet, Heated, Insulated, roofflat, Slope, sheltered
)
## setting up step regression
build_all <- lm(
sqrtgr ~ . +
roofflat:sheltered,
na.omit(building_data)
)
build_int <- lm(sqrtgr ~ 1, na.omit(building_data))
## Running forward and backward regression
build_forward <- step(build_int,
direction = "both", scope = formula(build_all),
trace = 1
)
build_backward <- step(build_all,
direction = "both", scope = formula(build_all),
trace = 1
)
summary(build_forward)
summary(build_backward)
#### Drop slope due to insignificance and having roofflat
build_mod <- lm(formula = sqrtgr ~ logground + logsize + Parapet + roofflat +
sheltered + roofflat:sheltered, data = gr_total)
# Eq 3.5
summary(build_mod)
### Using ERA 5 for weather
era_both <- lm(
sqrtgr ~ logground + roofflat + sheltered + est_wind +
est_temp_avg + logsize + Parapet +
roofflat:est_wind + roofflat:sheltered, gr_total
)
# Eq 4.1
summary(era_both)
gr_total <- read.csv("data-raw//updated_data.csv")
set.seed(1234)
w2_ca <- cross_valid_acc(
data = gr_total, formula2 = sqrtgr ~ logground + winter_wind_all,
rf_formula = gr ~ ground_max + winter_wind_all
)
w2_ca
set.seed(1234)
w2_ERA5_only <- cross_valid_acc(
data = gr_total, formula2 = sqrtgr ~ logground + est_wind,
rf_formula = gr ~ ground_max + winter_wind_all
)
