u10_array[,,1]
max(lat) - min(lat) + 1
dim(lat)
lat
lon
time2 <- as.POSIXct("1900-01-01 00:00:00", tz = "EST") + time*3600
head(time2)
class(u10_array)
class(u10_array[,,1])
u10_array[1,1,]
# This assignment is intended to get you familiar with the data.table by
# having you translate tidyverse statements into data.table ones. See
# 1_2_a_covid_cases_sol for an extended assignment description and data
# reference.
library(tidyverse)
library(data.table)
library(stat1080r)
install_github("https://github.com/beanb2/stat1080r")
library(devtools)
install_github("https://github.com/beanb2/stat1080r")
# This assignment is intended to get you familiar with the data.table by
# having you translate tidyverse statements into data.table ones. See
# 1_2_a_covid_cases_sol for an extended assignment description and data
# reference.
library(tidyverse)
library(data.table)
library(stat1080r)
data("world_pop_2021")
# Next, we will read, from the web, new COVID case counts for the first
# 7 days of September, 2022.
case_counts <- fread("https://covid19.who.int/WHO-COVID-19-global-data.csv")
case_counts <- case_counts[Date_reported >= "2022-09-01" &
Date_reported <= "2022-09-07"]
# Lets look at the first few lines of both datasets.
head(case_counts)
head(world_pop_2021)
# Notice that both tibbles (the tidyverse version of a data.frame) share a
# a common variable called "Country". As long as "Country" is formatted
# correctly, we should be able to use that variable in a "join" to create
# one combined data.frame. In the next few lines of code, I show how to do this
# with a merge statement
case_join <- dplyr::left_join(case_counts, world_pop_2021,
by = "Country")
case_join <- merge(case_counts, world_pop_2021, by = "Country", all.x = TRUE)
# 1a. You will notice that the join was not perfect. This is indicated by
#    rows in our combined data.table with missing population information.
#    Create a new data.table that only retains rows that contain missing
#    information for the variable PopTotal. You must use data.table
#    syntax to complete this (as well as all other problem parts).
# tidyverse
test_na <- filter(case_join, is.na(PopTotal))
# data.table
case_join<-as.data.table(case_join)
test_na1<-case_join[is.na(PopTotal)]
# 2. Create a new variable called case_100, which should be the number of
#    new daily cases per 100k people.
# tidyverse
case_join <- case_join |>
mutate(case_100 := New_cases / PopTotal * 1e5)
# data.table
case_join[,case_100 := New_cases / PopTotal * 1e5]
# 3. Determine the sum total of new cases by country for the week. Arrange
# in descending order the rows based on the sum of cases.
# Tidyverse
case_join_sum <- case_join |>
group_by(Country) |>
summarize(sum_case = sum(New_cases)) |>
arrange(desc(sum_case))
# data.table (must use chaining to accomplish)
case_join_sum<-case_join[,.(sum_case = sum(New_cases,na.rm = TRUE)),
by = Country][order(-sum_case)]
# 4. Now, return to the "case_join" data.table. Remove all rows that have
# missing populations OR countries with populations below 1 million people.
# Then, group by WHO_region and calculate the average case rate per region.
# Arrange the data.table to be in decreasing order of average case rate
# tidyverse
case_join |>
filter(!is.na(PopTotal)) |>
filter(PopTotal >= 1e6) |>
group_by(WHO_region) |>
summarize(case_100_sum = mean(case_100, na.rm = TRUE)) |>
arrange(desc(case_100_sum))
# data.table
case_join[!is.na(PopTotal)][PopTotal >= 1e6 ,.(case_100_sum = mean(case_100, na.rm = TRUE)), by = WHO_region][order(-case_100_sum)]
# This assignment is intended to get you familiar with the data.table by
# having you translate tidyverse statements into data.table ones. See
# 1_2_a_covid_cases_sol for an extended assignment description and data
# reference.
library(tidyverse)
library(data.table)
library(stat1080r)
library(dplyr)
data("world_pop_2021")
# Next, we will read, from the web, new COVID case counts for the first
# 7 days of September, 2022.
case_counts <- fread("https://covid19.who.int/WHO-COVID-19-global-data.csv")
case_counts <- case_counts[Date_reported >= "2022-09-01" &
Date_reported <= "2022-09-07"]
# Lets look at the first few lines of both datasets.
head(case_counts)
head(world_pop_2021)
# Notice that both tibbles (the tidyverse version of a data.frame) share a
# a common variable called "Country". As long as "Country" is formatted
# correctly, we should be able to use that variable in a "join" to create
# one combined data.frame. In the next few lines of code, I show how to do this
# with a merge statement
case_join <- dplyr::left_join(case_counts, world_pop_2021,
by = "Country")
case_join <- merge(case_counts, world_pop_2021, by = "Country", all.x = TRUE)
# 1a. You will notice that the join was not perfect. This is indicated by
#    rows in our combined data.table with missing population information.
#    Create a new data.table that only retains rows that contain missing
#    information for the variable PopTotal. You must use data.table
#    syntax to complete this (as well as all other problem parts).
# tidyverse
test_na <- filter(case_join, is.na(PopTotal))
# data.table
test_na1 <- case_join[is.na(PopTotal)]
# 2. Create a new variable called case_100, which should be the number of
#    new daily cases per 100k people.
# tidyverse
case_join <- case_join |>
mutate(case_100 := New_cases / PopTotal * 1e5)
# data.table
case_join[, case_100 := New_cases / PopTotal * 1e5]
# 3. Determine the sum total of new cases by country for the week. Arrange
# in descending order the rows based on the sum of cases.
# Tidyverse
case_join_sum <- case_join |>
group_by(Country) |>
summarize(sum_case = sum(New_cases)) |>
arrange(desc(sum_case))
# data.table (must use chaining to accomplish)
case_join_sum <- case_join[, .(sum_case = sum(New_cases)), by = Country][
order(-sum_case)]
# 4. Now, return to the "case_join" data.table. Remove all rows that have
# missing populations OR countries with populations below 1 million people.
# Then, group by WHO_region and calculate the average case rate per region.
# Arrange the data.table to be in decreasing order of average case rate
# tidyverse
case_join |>
filter(!is.na(PopTotal)) |>
filter(PopTotal >= 1e6) |>
group_by(WHO_region) |>
summarize(case_100_sum = mean(case_100, na.rm = TRUE)) |>
arrange(desc(case_100_sum))
# data.table
case_join[!is.na(PopTotal)][
PopTotal >= 1e6,
.(case_100_sum = mean(case_100, na.rm = TRUE)),
by = WHO_region][
order(-case_100_sum)
]
library(RNetCDF)
library(writexl)
library(ncdf4)
library(chron)
library(lattice)
library(RColorBrewer)
ncin <- nc_open("C:\\Users\\bean_student\\one_year.nc")
library(RNetCDF)
library(writexl)
library(ncdf4)
library(chron)
library(lattice)
library(RColorBrewer)
ncin <- nc_open("C:\\Users\\bean_student\\Documents\\cru10min30_tmp.nc")
library(RNetCDF)
library(writexl)
library(ncdf4)
library(chron)
library(lattice)
library(RColorBrewer)
dname <- "u10"
ncin <- nc_open("C:\\Users\\bean_student\\one_year.nc")
library(RNetCDF)
library(writexl)
library(ncdf4)
library(chron)
library(lattice)
library(RColorBrewer)
dname <- "u10"
ncin <- nc_open("C:\\Users\\bean_student\\one_year.nc")
library(RNetCDF)
library(writexl)
library(ncdf4)
library(chron)
library(lattice)
library(RColorBrewer)
dname <- "u10"
ncin <- nc_open("C:\\Users\\bean_student\\one_year.nc")
library(RNetCDF)
library(writexl)
library(ncdf4)
library(chron)
library(lattice)
library(RColorBrewer)
dname <- "u10"
ncin <- nc_open("C:\\Users\\bean_student\\Documents\\one_year.nc")
ncin
ncin
lon <- ncvar_get(ncin, "longitude")
head(lon)
dim(lon)
lat <- ncvar_get(ncin, "latitude")
time <- ncvar_get(ncin, "time")
dim(time)
tunits <- ncatt_get(ncin,"time","units")
nt <- dim(time)
nt
tunits
u10_array <- ncvar_get(ncin,dname)
dlname <- ncatt_get(ncin,dname,"long_name")
dunits <- ncatt_get(ncin,dname,"units")
fillvalue <- ncatt_get(ncin,dname,"_FillValue")
dim(u10_array)
ncatt_get(ncin,0,"title")
ncatt_get(ncin,0,"institution")
ncatt_get(ncin,0,"source")
u10_array[,,1]
max(lat) - min(lat) + 1
dim(lat)
lat
lon
# convert time -- split the time units string into fields
time2 <- as.POSIXct("1900-01-01 00:00:00", tz = "EST") + time*3600
head(time2)
u10_array[u10_array==fillvalue$value] <- NA
sum(is.na(u10_array))
u10_slice <- u10_array[,,1]
grid <- expand.grid(lon=lon, lat=lat)
levelplot(u10_slice ~ lon * lat, data=grid, cuts=11, pretty=T,
col.regions=(rev(brewer.pal(10,"RdBu"))))
dim(10_array)
dim(u10_array)
v10 <- ncvar_get(ncin,"v10")
dim(v10)
wind_speed <- sqrt(u10_array^2 + v10^2)
ncvar_add(ncin, wind_speed)
dim(wind_speed)
summary(ncin)
ncin
wind_speed_var <- ncvar_def("wind_speed", "m/s", c("lat", "lon", "time"), prec = "double")
wind_speed_var <- ncvar_def("wind_speed", "m/s", c("longitude", "latitude", "time"), prec = "double")
?ncvar_add
?ncvar_def
wind_speed_var <- ncvar_def("wind_speed", "m/s", c("longitude", "latitude", "time"))
wind_speed_var <- ncvar_def("wind_speed", "m/s", c("lon", "lat", "time"))
dim(wind_speed)
dim(u10_array)
dim(v10)
wind_speed_var <- ncvar_def("wind_speed", "m/s", c(489, 221, 8760))
wind_speed_var <- ncvar_def("wind_speed", "float", c("lon", "lat", "time"))
ncin
londim <- ncdim_def("lon","degrees_east",as.double(lon3))
londim <- ncdim_def("lon","degrees_east",as.double(lon))
latdim <- ncdim_def("lat","degrees_north",as.double(lat))
timedim <- ncdim_def("time",tunits3,as.double(time))
wind_speed_var <- ncvar_def("wind_speed", "m/s", c(londim, latdim, timedim))
timedim <- ncdim_def("time",tunits3,as.double(time))
timedim <- ncdim_def("time","hours since 1900-01-01 00:00:00.0",as.double(time))
wind_speed_var <- ncvar_def("wind_speed", "m/s", c(lon, lat, time))
ncin <- nc_open("C:\\Users\\bean_student\\small_subset.nc")
library(RNetCDF)
library(writexl)
library(ncdf4)
library(chron)
library(lattice)
library(RColorBrewer)
ncin <- nc_open("C:\\Users\\bean_student\\small_subset.nc")
ncin
lon <- ncvar_get(ncin, "longitude")
head(lon)
dim(lon)
lat <- ncvar_get(ncin, "latitude")
time <- ncvar_get(ncin, "time")
dim(time)
tunits <- ncatt_get(ncin,"time","units")
nt <- dim(time)
nt
tunits
u10_array <- ncvar_get(ncin,"u10")
v10 <- ncvar_get(ncin,"v10")
dlname <- ncatt_get(ncin,"u10","long_name")
dunits <- ncatt_get(ncin,"u10","units")
fillvalue <- ncatt_get(ncin,"u10","_FillValue")
dim(u10_array)
ncatt_get(ncin,0,"title")
ncatt_get(ncin,0,"institution")
ncatt_get(ncin,0,"source")
u10_array[,,1]
max(lat) - min(lat) + 1
dim(lat)
lat
lon
# convert time -- split the time units string into fields
time2 <- as.POSIXct("1900-01-01 00:00:00", tz = "EST") + time*3600
head(time2)
u10_array[u10_array==fillvalue$value] <- NA
sum(is.na(u10_array))
u10_slice <- u10_array[,,1]
grid <- expand.grid(lon=lon, lat=lat)
levelplot(u10_slice ~ lon * lat, data=grid, cuts=11, pretty=T,
col.regions=(rev(brewer.pal(10,"RdBu"))))
wind_speed <- sqrt(u10_array^2 + v10^2)
library(RNetCDF)
library(writexl)
library(ncdf4)
library(chron)
library(lattice)
library(RColorBrewer)
ncin <- nc_open("C:\\Users\\bean_student\\small_subset.nc")
ncin
lon <- ncvar_get(ncin, "longitude")
head(lon)
dim(lon)
lat <- ncvar_get(ncin, "latitude")
time <- ncvar_get(ncin, "time")
dim(time)
tunits <- ncatt_get(ncin,"time","units")
nt <- dim(time)
nt
tunits
u10_array <- ncvar_get(ncin,"u10")
v10 <- ncvar_get(ncin,"v10")
dlname <- ncatt_get(ncin,"u10","long_name")
dunits <- ncatt_get(ncin,"u10","units")
fillvalue <- ncatt_get(ncin,"u10","_FillValue")
dim(u10_array)
ncatt_get(ncin,0,"title")
ncatt_get(ncin,0,"institution")
ncatt_get(ncin,0,"source")
u10_array[,,1]
max(lat) - min(lat) + 1
dim(lat)
lat
lon
# convert time -- split the time units string into fields
time2 <- as.POSIXct("1900-01-01 00:00:00", tz = "EST") + time*3600
head(time2)
u10_array[u10_array==fillvalue$value] <- NA
sum(is.na(u10_array))
u10_slice <- u10_array[,,1]
grid <- expand.grid(lon=lon, lat=lat)
levelplot(u10_slice ~ lon * lat, data=grid, cuts=11, pretty=T,
col.regions=(rev(brewer.pal(10,"RdBu"))))
wind_speed <- sqrt(u10_array^2 + v10^2)
dim(u10_slice)
dim(u10_array)
dim(v10)
dim(wind_speed)
class(wind_speed)
winter_wind <- apply(wind_speed, MARGIN = c(1, 2), FUN = mean)
winter_wind
dim(winter_wind)
winter_wind <- apply(wind_speed, c(1, 2), function(slice) {
sum(slice > 4.4704) / length(slice)
})
head(winter_wind)
head(wind_speed)
head(winter_wind)
lat
lon
ncin
head(winter_wind)
head(u10)
head(u10_array)
wind_speed
library(RNetCDF)
library(writexl)
library(ncdf4)
library(chron)
library(lattice)
library(RColorBrewer)
ncin <- nc_open("C:\\Users\\bean_student\\small_subset.nc")
ncin
lon <- ncvar_get(ncin, "longitude")
head(lon)
dim(lon)
lat <- ncvar_get(ncin, "latitude")
time <- ncvar_get(ncin, "time")
dim(time)
tunits <- ncatt_get(ncin,"time","units")
nt <- dim(time)
nt
tunits
u10_array <- ncvar_get(ncin,"u10")
v10 <- ncvar_get(ncin,"v10")
dlname <- ncatt_get(ncin,"u10","long_name")
dunits <- ncatt_get(ncin,"u10","units")
fillvalue <- ncatt_get(ncin,"u10","_FillValue")
dim(u10_array)
ncatt_get(ncin,0,"title")
ncatt_get(ncin,0,"institution")
ncatt_get(ncin,0,"source")
u10_array[,,1]
max(lat) - min(lat) + 1
dim(lat)
lat
lon
# convert time -- split the time units string into fields
time2 <- as.POSIXct("1900-01-01 00:00:00", tz = "EST") + time*3600
head(time2)
u10_array[u10_array==fillvalue$value] <- NA
sum(is.na(u10_array))
u10_slice <- u10_array[,,1]
grid <- expand.grid(lon=lon, lat=lat)
levelplot(u10_slice ~ lon * lat, data=grid, cuts=11, pretty=T,
col.regions=(rev(brewer.pal(10,"RdBu"))))
wind_speed <- sqrt(u10_array^2 + v10^2)
winter_wind <- apply(wind_speed, c(1, 2), function(slice) {
sum(slice > 4.4704) / length(slice)
})
winter_wind
?nc_open
?ncvar_get
ncin <- ncdf4::nc_open("C:\\Users\\bean_student\\small_subset.nc")
u10 <- ncdf4::ncvar_get(ncin,"u10")
v10 <- ncdf4::ncvar_get(ncin,"v10")
wind_speed <- ncdf4::sqrt(u10^2 + v10^2)
ncin <- ncdf4::nc_open("C:\\Users\\bean_student\\small_subset.nc")
u10 <- ncdf4::ncvar_get(ncin,"u10")
v10 <- ncdf4::ncvar_get(ncin,"v10")
wind_speed <- sqrt(u10^2 + v10^2)
winter_wind <- apply(wind_speed, c(1, 2), function(slice) {
sum(slice > 4.4704) / length(slice)
})
devtools::document()
devtools::load_all()
x <- winter_wind_grid("C:\\Users\\bean_student\\small_subset.nc")
devtools::document()
x <- winter_wind_grid("C:\\Users\\bean_student\\small_subset.nc")
x
y <- (x + x)/3
y
devtools::load_all()
x <- winter_wind_grid("C:\\Users\\bean_student\\small_subset.nc")
saveRDS(x, file = "D:\\winter.rds")
wind_1995 <- winter_wind_grid("D:\\1995.nc")
memory.limit()
usethis::edit_r_environ()
memory.limit()
wind_1995 <- winter_wind_grid("D:\\1995.nc")
devtools::load_all()
wind_1995 <- winter_wind_grid("D:\\1995.nc")
devtools::load_all()
library(terra)
install.packages("lintr")
lintr:::addin_lint()
install.packages("lintr")
install.packages("lintr")
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
library(lintr)
library(RNetCDF)
library(writexl)
library(ncdf4)
library(chron)
library(lattice)
library(RColorBrewer)
dname <- "u10"
ncin <- nc_open("C:\\Users\\bean_student\\small_subset.nc")
ncin
lon <- ncvar_get(ncin, "longitude")
head(lon)
dim(lon)
lat <- ncvar_get(ncin, "latitude")
time <- ncvar_get(ncin, "time")
dim(time)
tunits <- ncatt_get(ncin,"time","units")
nt <- dim(time)
nt
tunits
u10_array <- ncvar_get(ncin,dname)
dlname <- ncatt_get(ncin,dname,"long_name")
dunits <- ncatt_get(ncin,dname,"units")
fillvalue <- ncatt_get(ncin,dname,"_FillValue")
dim(u10_array)
ncatt_get(ncin,0,"title")
ncatt_get(ncin,0,"institution")
ncatt_get(ncin,0,"source")
u10_array[,,1]
max(lat) - min(lat) + 1
dim(lat)
lat
lon
# convert time -- split the time units string into fields
time2 <- as.POSIXct("1900-01-01 00:00:00", tz = "EST") + time*3600
head(time2)
u10_array[u10_array==fillvalue$value] <- NA
sum(is.na(u10_array))
u10_slice <- u10_array[,,1]
grid <- expand.grid(lon=lon, lat=lat)
levelplot(u10_slice ~ lon * lat, data=grid, cuts=11, pretty=T,
col.regions=(rev(brewer.pal(10,"RdBu"))))
library(terra)
class(u10_array)
rasteru10 <- raster(10_array)
raster10 <- raster(u10_array)
ncrast <- raster(ncin)
rast(u10_array)
raster10 <- rast(u10_array)
rasteru10 <- rast(u10_array)
rasterv10 <- rast(v10_array)
rasterv10 <- rast(v10)
ncin
ncin$nvars
ncrast <- rast("C:\\Users\\bean_student\\small_subset.nc")
ncrast
new_var <- ncrast[[u10]] + ncrast[[v10]]
