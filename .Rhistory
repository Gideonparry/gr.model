# more useful
og_gr_pred <- original_prediction^2
lin_gr_pred <- lin_pred^2
rmse(valid_data$gr, og_gr_pred)
median(abs(valid_data$gr - og_gr_pred))
rmse(valid_data$gr[!is.na(lin_pred)], na.omit(lin_gr_pred))
median(abs(valid_data$gr[!is.na(lin_gr_pred)] - na.omit(lin_gr_pred)))
#################### Trying with imputation on Exposure ########################
train_data2 <- data2[data2$building_code %in% train_buildings,]
valid_data2 <- data2[data2$building_code %in% valid_buildings,]
lin_mod2 <-  lm(sqrtgr ~ logground + roofflat*Exposure + roofflat*winter_wind +
log(Size) + temp_avg + Heated + Parapet,
data = train_data2)
lin_pred2 <- predict(lin_mod2, valid_data2)
## Looking at RMSE of all of them
rmse(valid_data$sqrtgr, original_prediction)
rmse(valid_data$sqrtgr[!is.na(lin_pred)], na.omit(lin_pred))
rmse(valid_data2$sqrtgr[!is.na(lin_pred2)], na.omit(lin_pred2))
## comparing median absolute errors
abs_error_lin2 <- abs(na.omit(lin_pred2) - valid_data2$sqrtgr[!is.na(lin_pred2)])
median(abs_error_og)
median(abs_error_lin)
median(abs_error_lin2)
## squaring the squared GR
lin_gr_pred2 <- lin_pred2^2
rmse(valid_data$gr, og_gr_pred)
rmse(valid_data$gr[!is.na(lin_pred)], na.omit(lin_gr_pred))
rmse(valid_data2$gr[!is.na(lin_pred2)], na.omit(lin_gr_pred2))
median(abs(valid_data$gr - og_gr_pred))
median(abs(valid_data$gr[!is.na(lin_gr_pred)] - na.omit(lin_gr_pred)))
median(abs(valid_data2$gr[!is.na(lin_gr_pred2)] - na.omit(lin_gr_pred2)))
###### Random Forest
forest_train1 <- na.omit(train_data[,c(2:5, 7, 11, 13, 19:22, 25:27, 33, 35)])
forest_valid1 <- na.omit(valid_data[,c(2:5, 7, 11, 13, 19:22, 25:27, 33, 35)])
train_rf <- randomForest(formula = gr ~ . -building_code -city_code -season,
data =forest_train1)
varImpPlot(train_rf)
forest_preds1 <- predict(train_rf, forest_valid1)
rmse(forest_valid1$gr, forest_preds1)
rmse(valid_data$gr, og_gr_pred)
rmse(valid_data$gr[!is.na(lin_pred)], na.omit(lin_gr_pred))
rmse(valid_data2$gr[!is.na(lin_pred2)], na.omit(lin_gr_pred2))
median(abs(forest_valid1$gr - forest_preds1))
median(abs(valid_data$gr - og_gr_pred))
median(abs(valid_data$gr[!is.na(lin_gr_pred)] - na.omit(lin_gr_pred)))
median(abs(valid_data2$gr[!is.na(lin_gr_pred2)] - na.omit(lin_gr_pred2)))
### trying with imputed data
forest_train2 <- na.omit(train_data2[,c(2:5, 7, 11, 13, 19:22, 25:27, 33, 35)])
forest_valid2 <- na.omit(valid_data2[,c(2:5, 7, 11, 13, 19:22, 25:27, 33, 35)])
train_rf2 <- randomForest(formula = gr ~ . -building_code -city_code -season,
data =forest_train2)
varImpPlot(train_rf2)
forest_preds2 <- predict(train_rf2, forest_valid2)
rmse(forest_valid2$gr, forest_preds2)
median(abs(forest_valid2$gr - forest_preds2))
coef(best_model)
rmse(valid_data$gr, og_gr_pred)
rmse(valid_data$gr[!is.na(lin_pred)], na.omit(lin_gr_pred))
rmse(valid_data2$gr[!is.na(lin_pred2)], na.omit(lin_gr_pred2))
rmse(forest_valid1$gr, forest_preds1)
rmse(forest_valid2$gr, forest_preds2)
median(abs(valid_data$gr - og_gr_pred))
median(abs(valid_data$gr[!is.na(lin_gr_pred)] - na.omit(lin_gr_pred)))
median(abs(valid_data2$gr[!is.na(lin_gr_pred2)] - na.omit(lin_gr_pred2)))
median(abs(forest_valid1$gr - forest_preds1))
median(abs(forest_valid2$gr - forest_preds2))
library(Metrics)
library(randomForest)
data <- read.csv("C:\\Users\\bean_student\\Documents\\gr_model_data.csv")
?sample
length(unique(data$building_code)
length(unique(data$building_code))
length(unique(data$building_code))
building_groups <- sample(1:5,length(unique(data$building_code)),
replace = TRUE)
building_groups
rep(1:5,length(unique(data$building_code)))
?rep
rep_len(1:5,length(unique(data$building_code)))
sample(rep_len(1:5,length(unique(data$building_code))))
data <- read.csv("C:\\Users\\bean_student\\Documents\\gr_model_data.csv")
set.seed(123)
building_groups <- sample(rep_len(1:5,length(unique(data$building_code))))
building_nums <- sample(rep_len(1:5,length(unique(data$building_code))))
data <- read.csv("C:\\Users\\bean_student\\Documents\\gr_model_data.csv")
set.seed(123)
building_nums <- sample(rep_len(1:5,length(unique(data$building_code))))
building_nums
test_build1 <- unique(data$building_code)[building_nums == 1]
test_build2 <- unique(data$building_code)[building_nums == 2]
test_build3 <- unique(data$building_code)[building_nums == 2]
test_build4 <- unique(data$building_code)[building_nums == 4]
test_build5 <- unique(data$building_code)[building_nums == 5]
test_build1
test_build2
test_build3
test_build4
test_build5
library(Metrics)
library(randomForest)
data <- read.csv("C:\\Users\\bean_student\\Documents\\gr_model_data.csv")
data2 <- data
data2$Exposure <- ifelse(is.na(data2$Exposure), 1, data2$Exposure)
set.seed(123)
## taking sample to partition buildings
train_nums <- sample(length(unique(data$building_code)),
length(unique(data$building_code))*(2/3))
## separating out the buildings
train_buildings <- unique(data$building_code)[train_nums]
test_buildings <- unique(data$building_code)[-train_nums]
## creating the datasets
train_data <- data[data$building_code %in% train_buildings,]
test_data <- data[data$building_code %in% test_buildings,]
## using original model
original_model <- lm(sqrtgr ~ logground, train_data)
original_prediction <- predict(original_model, test_data)
## getting rmse and median absoloute error
rmse(test_data$sqrtgr, original_prediction)
abs_error_og <- abs(original_prediction - test_data$sqrtgr)
median(abs_error_og)
## repeating the above with my proposed linear model
lin_mod <-  lm(sqrtgr ~ logground + roofflat*Exposure + roofflat*winter_wind +
log(Size) + temp_avg + Heated + Parapet,
data = train_data)
lin_pred <- predict(lin_mod, test_data)
rmse(test_data$sqrtgr[!is.na(lin_pred)], na.omit(lin_pred))
abs_error_lin <- abs(na.omit(lin_pred) - test_data$sqrtgr[!is.na(lin_pred)])
median(abs_error_lin)
## comparing to averaging all sqrtgr
avg_pred <- rep(mean(test_data$sqrtgr),length(test_data$sqrtgr))
rmse(test_data$sqrtgr, avg_pred)
abs_error_avg <- abs(avg_pred - test_data$sqrtgr)
median(abs_error_avg)
# comparing accuracy for gr (not sqrt) each method to make later comparisons
# more useful
og_gr_pred <- original_prediction^2
lin_gr_pred <- lin_pred^2
rmse(test_data$gr, og_gr_pred)
median(abs(test_data$gr - og_gr_pred))
rmse(test_data$gr[!is.na(lin_pred)], na.omit(lin_gr_pred))
median(abs(test_data$gr[!is.na(lin_gr_pred)] - na.omit(lin_gr_pred)))
#################### Trying with imputation on Exposure ########################
train_data2 <- data2[data2$building_code %in% train_buildings,]
test_data2 <- data2[data2$building_code %in% test_buildings,]
lin_mod2 <-  lm(sqrtgr ~ logground + roofflat*Exposure + roofflat*winter_wind +
log(Size) + temp_avg + Heated + Parapet,
data = train_data2)
lin_pred2 <- predict(lin_mod2, test_data2)
## Looking at RMSE of all of them
rmse(test_data$sqrtgr, original_prediction)
rmse(test_data$sqrtgr[!is.na(lin_pred)], na.omit(lin_pred))
rmse(test_data2$sqrtgr[!is.na(lin_pred2)], na.omit(lin_pred2))
## comparing median absolute errors
abs_error_lin2 <- abs(na.omit(lin_pred2) - test_data2$sqrtgr[!is.na(lin_pred2)])
median(abs_error_og)
median(abs_error_lin)
median(abs_error_lin2)
## squaring the squared GR
lin_gr_pred2 <- lin_pred2^2
rmse(test_data$gr, og_gr_pred)
rmse(test_data$gr[!is.na(lin_pred)], na.omit(lin_gr_pred))
rmse(test_data2$gr[!is.na(lin_pred2)], na.omit(lin_gr_pred2))
median(abs(test_data$gr - og_gr_pred))
median(abs(test_data$gr[!is.na(lin_gr_pred)] - na.omit(lin_gr_pred)))
median(abs(test_data2$gr[!is.na(lin_gr_pred2)] - na.omit(lin_gr_pred2)))
###### Random Forest
forest_train1 <- na.omit(train_data[,c(2:5, 7, 11, 13, 19:22, 25:27, 33, 35)])
forest_test1 <- na.omit(test_data[,c(2:5, 7, 11, 13, 19:22, 25:27, 33, 35)])
train_rf <- randomForest(formula = gr ~ . -building_code -city_code -season,
data =forest_train1)
varImpPlot(train_rf)
forest_preds1 <- predict(train_rf, forest_test1)
rmse(forest_test1$gr, forest_preds1)
median(abs(forest_test1$gr - forest_preds1))
### trying with imputed data
forest_train2 <- na.omit(train_data2[,c(2:5, 7, 11, 13, 19:22, 25:27, 33, 35)])
forest_test2 <- na.omit(test_data2[,c(2:5, 7, 11, 13, 19:22, 25:27, 33, 35)])
train_rf2 <- randomForest(formula = gr ~ . -building_code -city_code -season,
data =forest_train2)
varImpPlot(train_rf2)
forest_preds2 <- predict(train_rf2, forest_test2)
rmse(forest_test2$gr, forest_preds2)
median(abs(forest_test2$gr - forest_preds2))
# comparing accuracy for all models. Order is original model, linear without
# imputation, linear with imputation, rf without imputation, rf with imputation.
rmse(test_data$gr, og_gr_pred)
rmse(test_data$gr[!is.na(lin_pred)], na.omit(lin_gr_pred))
rmse(test_data2$gr[!is.na(lin_pred2)], na.omit(lin_gr_pred2))
rmse(forest_test1$gr, forest_preds1)
rmse(forest_test2$gr, forest_preds2)
median(abs(test_data$gr - og_gr_pred))
median(abs(test_data$gr[!is.na(lin_gr_pred)] - na.omit(lin_gr_pred)))
median(abs(test_data2$gr[!is.na(lin_gr_pred2)] - na.omit(lin_gr_pred2)))
median(abs(forest_test1$gr - forest_preds1))
median(abs(forest_test2$gr - forest_preds2))
train_data1 <- data[!(data$building_code %in% test_build1),]
test_data1 <- data[data$building_code %in% test_build1,]
nrow(train_data1)
nrow(test_data1)
data <- read.csv("C:\\Users\\bean_student\\Documents\\gr_model_data.csv")
set.seed(123)
building_nums <- sample(rep_len(1:5,length(unique(data$building_code))))
test_build1 <- unique(data$building_code)[building_nums == 1]
test_build2 <- unique(data$building_code)[building_nums == 2]
test_build3 <- unique(data$building_code)[building_nums == 2]
test_build4 <- unique(data$building_code)[building_nums == 4]
test_build5 <- unique(data$building_code)[building_nums == 5]
train_data1 <- data[!(data$building_code %in% test_build1),]
test_data1 <- data[data$building_code %in% test_build1,]
train_data2 <- data[!(data$building_code %in% test_build2),]
test_data2 <- data[data$building_code %in% test_build2,]
train_data3 <- data[!(data$building_code %in% test_build3),]
test_data3 <- data[data$building_code %in% test_build3,]
train_data4 <- data[!(data$building_code %in% test_build4),]
test_data4 <- data[data$building_code %in% test_build4,]
train_data5 <- data[!(data$building_code %in% test_build5),]
test_data5 <- data[data$building_code %in% test_build5,]
### This part could potentially be made a function
train_data <- train_data1
test_data <- test_data1
library(Metrics)
library(randomForest)
data <- read.csv("C:\\Users\\bean_student\\Documents\\gr_model_data.csv")
set.seed(123)
## setting each build as being in fold 1-5
building_nums <- sample(rep_len(1:5,length(unique(data$building_code))))
# puting numbers to building codes
test_build1 <- unique(data$building_code)[building_nums == 1]
test_build2 <- unique(data$building_code)[building_nums == 2]
test_build3 <- unique(data$building_code)[building_nums == 2]
test_build4 <- unique(data$building_code)[building_nums == 4]
test_build5 <- unique(data$building_code)[building_nums == 5]
## making train and test data based on each fold
train_data1 <- data[!(data$building_code %in% test_build1),]
test_data1 <- data[data$building_code %in% test_build1,]
train_data2 <- data[!(data$building_code %in% test_build2),]
test_data2 <- data[data$building_code %in% test_build2,]
train_data3 <- data[!(data$building_code %in% test_build3),]
test_data3 <- data[data$building_code %in% test_build3,]
train_data4 <- data[!(data$building_code %in% test_build4),]
test_data4 <- data[data$building_code %in% test_build4,]
train_data5 <- data[!(data$building_code %in% test_build5),]
test_data5 <- data[data$building_code %in% test_build5,]
### This part could potentially be made a function
train_data <- train_data1
test_data <- test_data1
x = 7
print("I love "+x)
paste("I love ",x)
paste("I love",x)
original_model <- lm(sqrtgr ~ logground, train_data)
original_prediction <- predict(original_model, test_data)
rmse_og_sqrt <- rmse(test_data$sqrtgr, original_prediction)
mae_og_sqrt <- median(abs(original_prediction - test_data$sqrtgr))
mae_mlr_sqrt <-
median(abs(na.omit(lin_pred) - test_data$sqrtgr[!is.na(lin_pred)]))
# Following the process with the linear model
lin_mod <-  lm(sqrtgr ~ logground + roofflat*Exposure + roofflat*winter_wind +
log(Size) + temp_avg + Heated + Parapet,
data = train_data)
lin_pred <- predict(lin_mod, test_data)
rmse_mlr_sqrt <- rmse(test_data$sqrtgr[!is.na(lin_pred)], na.omit(lin_pred))
mae_mlr_sqrt <-
median(abs(na.omit(lin_pred) - test_data$sqrtgr[!is.na(lin_pred)]))
og_gr_pred <- original_prediction^2
lin_gr_pred <- lin_pred^2
rmse_og <- rmse(test_data$gr, og_gr_pred)
mae_og <- median(abs(test_data$gr - og_gr_pred))
rsme_mlr <- rmse(test_data$gr[!is.na(lin_pred)], na.omit(lin_gr_pred))
mae_mlr <- median(abs(test_data$gr[!is.na(lin_gr_pred)] - na.omit(lin_gr_pred)))
forest_train <- na.omit(train_data[,c(2:5, 7, 11, 13, 19:22, 25:27, 33, 35)])
forest_test <- na.omit(test_data[,c(2:5, 7, 11, 13, 19:22, 25:27, 33, 35)])
train_rf <- randomForest(formula = gr ~ . -building_code -city_code -season,
data =forest_train)
forest_preds <- predict(train_rf, forest_test)
mae_forest <- median(abs(forest_test$gr - forest_preds))
rmse_forest <- rmse(forest_test$gr, forest_preds)
mae_forest <- median(abs(forest_test$gr - forest_preds))
?mae
library(Metrics)
library(randomForest)
data <- read.csv("C:\\Users\\bean_student\\Documents\\gr_model_data.csv")
set.seed(123)
## setting each build as being in fold 1-5
building_nums <- sample(rep_len(1:5,length(unique(data$building_code))))
# puting numbers to building codes
test_build1 <- unique(data$building_code)[building_nums == 1]
test_build2 <- unique(data$building_code)[building_nums == 2]
test_build3 <- unique(data$building_code)[building_nums == 2]
test_build4 <- unique(data$building_code)[building_nums == 4]
test_build5 <- unique(data$building_code)[building_nums == 5]
## making train and test data based on each fold
train_data1 <- data[!(data$building_code %in% test_build1),]
test_data1 <- data[data$building_code %in% test_build1,]
train_data2 <- data[!(data$building_code %in% test_build2),]
test_data2 <- data[data$building_code %in% test_build2,]
train_data3 <- data[!(data$building_code %in% test_build3),]
test_data3 <- data[data$building_code %in% test_build3,]
train_data4 <- data[!(data$building_code %in% test_build4),]
test_data4 <- data[data$building_code %in% test_build4,]
train_data5 <- data[!(data$building_code %in% test_build5),]
test_data5 <- data[data$building_code %in% test_build5,]
############## This part could potentially be made a function ##################
train_data <- train_data1
test_data <- test_data1
# Taking the original model with the specified train and test data
original_model <- lm(sqrtgr ~ logground, train_data)
original_prediction <- predict(original_model, test_data)
rmse_og_sqrt <- rmse(test_data$sqrtgr, original_prediction)
mdae_og_sqrt <- median(abs(original_prediction - test_data$sqrtgr))
# Following the process with the linear model
lin_mod <-  lm(sqrtgr ~ logground + roofflat*Exposure + roofflat*winter_wind +
log(Size) + temp_avg + Heated + Parapet,
data = train_data)
lin_pred <- predict(lin_mod, test_data)
rmse_mlr_sqrt <- rmse(test_data$sqrtgr[!is.na(lin_pred)], na.omit(lin_pred))
mdae_mlr_sqrt <-
median(abs(na.omit(lin_pred) - test_data$sqrtgr[!is.na(lin_pred)]))
# Squaring the square root for common units
og_gr_pred <- original_prediction^2
lin_gr_pred <- lin_pred^2
rmse_og <- rmse(test_data$gr, og_gr_pred)
mdae_og <- median(abs(test_data$gr - og_gr_pred))
rsme_mlr <- rmse(test_data$gr[!is.na(lin_pred)], na.omit(lin_gr_pred))
mdae_mlr <- median(abs(test_data$gr[!is.na(lin_gr_pred)] - na.omit(lin_gr_pred)))
## Random Forest model check
forest_train <- na.omit(train_data[,c(2:5, 7, 11, 13, 19:22, 25:27, 33, 35)])
forest_test <- na.omit(test_data[,c(2:5, 7, 11, 13, 19:22, 25:27, 33, 35)])
train_rf <- randomForest(formula = gr ~ . -building_code -city_code -season,
data =forest_train)
forest_preds <- predict(train_rf, forest_test)
rmse_forest <- rmse(forest_test$gr, forest_preds)
mdae_forest <- median(abs(forest_test$gr - forest_preds))
pred_metrics <- c(rmse_og_sqrt, mdae_og_sqrt, rmse_mlr_sqrt, mdae_mlr_sqrt,
rmse_og, mdae_og, rsme_mlr, mdae_mlr, rmse_forest, mdae_forest)
pred_metrics <- c("Original model RMSE sqrt", "New model RSME sqrt",
"Original model median abs error sqrt",
"New model median abs error sqrt", "Original model RMSE",
"New model RMSE", "Random forest RMSE",
"Original Model median abs error",
"New Model median abs error",
"Random forest median abs error",)
pred_metrics <- c("Original model RMSE sqrt", "New model RSME sqrt",
"Original model median abs error sqrt",
"New model median abs error sqrt", "Original model RMSE",
"New model RMSE", "Random forest RMSE",
"Original Model median abs error",
"New Model median abs error",
"Random forest median abs error")
pred_results <- c(rmse_og_sqrt, rmse_mlr_sqrt, mdae_og_sqrt, mdae_mlr_sqrt,
rmse_og, rsme_mlr, rmse_forest, mdae_og, mdae_mlr,
mdae_forest)
cbind(pred_metrics,pred_results)
devtools::document()
devtools::load_all()
gr_cv(train_data1, test_data1)
fold1_results <- gr_cv(train_data1, test_data1)
fold1_results <- gr_cv(train_data1, test_data1)
fold2_results <- gr_cv(train_data2, test_data2)
fold3_results <- gr_cv(train_data3, test_data3)
fold4_results <- gr_cv(train_data4, test_data4)
fold5_results <- gr_cv(train_data5, test_data5)
cbind(fold1_results[,1],mean(fold1_results[,2],
fold2_results[,2],
fold3_results[,2],
fold4_results[,2],
fold5_results[,2]))
fold2_results
fold3_results
fold4_results
fold5_results
fold1_results[,2]
mean(fold1_results[,2],
fold2_results[,2],
fold3_results[,2],
fold4_results[,2],
fold5_results[,2])
as.numeric(fold1_results[,2])
cbind(fold1_results[,1],mean(as.numeric(fold1_results[,2]),
as.numeric(fold2_results[,2]),
as.numeric(fold3_results[,2]),
as.numeric(fold4_results[,2]),
as.numeric(fold5_results[,2])))
mean(as.numeric(fold1_results[,2]),
as.numeric(fold2_results[,2]),
as.numeric(fold3_results[,2]),
as.numeric(fold4_results[,2]),
as.numeric(fold5_results[,2]))
as.numeric(fold2_results[,2])
mean(as.numeric(fold1_results[,2]),
as.numeric(fold2_results[,2]))
x <- as.numeric(fold1_results[,2])
y <- as.numeric(fold2_results[,2])
mean(x,y)
length(x)
length(y)
cbind(fold1_results[,1],(as.numeric(fold1_results[,2]) +
as.numeric(fold2_results[,2]) +
as.numeric(fold3_results[,2]) +
as.numeric(fold4_results[,2]) +
as.numeric(fold5_results[,2]))/5 )
data <- read.csv("C:\\Users\\bean_student\\Documents\\gr_model_data.csv")
set.seed(123)
## setting each build as being in fold 1-5
building_nums <- sample(rep_len(1:5,length(unique(data$building_code))))
# puting numbers to building codes
test_build1 <- unique(data$building_code)[building_nums == 1]
test_build2 <- unique(data$building_code)[building_nums == 2]
test_build3 <- unique(data$building_code)[building_nums == 2]
test_build4 <- unique(data$building_code)[building_nums == 4]
test_build5 <- unique(data$building_code)[building_nums == 5]
## making train and test data based on each fold
train_data1 <- data[!(data$building_code %in% test_build1),]
test_data1 <- data[data$building_code %in% test_build1,]
train_data2 <- data[!(data$building_code %in% test_build2),]
test_data2 <- data[data$building_code %in% test_build2,]
train_data3 <- data[!(data$building_code %in% test_build3),]
test_data3 <- data[data$building_code %in% test_build3,]
train_data4 <- data[!(data$building_code %in% test_build4),]
test_data4 <- data[data$building_code %in% test_build4,]
train_data5 <- data[!(data$building_code %in% test_build5),]
test_data5 <- data[data$building_code %in% test_build5,]
fold1_results <- gr_cv(train_data1, test_data1)
fold2_results <- gr_cv(train_data2, test_data2)
fold3_results <- gr_cv(train_data3, test_data3)
fold4_results <- gr_cv(train_data4, test_data4)
fold5_results <- gr_cv(train_data5, test_data5)
cbind(fold1_results[,1],(as.numeric(fold1_results[,2]) +
as.numeric(fold2_results[,2]) +
as.numeric(fold3_results[,2]) +
as.numeric(fold4_results[,2]) +
as.numeric(fold5_results[,2]))/5 )
## setting each observation as being in fold 1-5
obs_nums <- sample(rep_len(1:5,nrow(data)))
obs_nums
rep_len(1:5,nrow(data))
library(Metrics)
library(randomForest)
data <- read.csv("C:\\Users\\bean_student\\Documents\\gr_model_data.csv")
set.seed(123)
## setting each building as being in fold 1-5
building_nums <- sample(rep_len(1:5,length(unique(data$building_code))))
# puting numbers to building codes
test_build1 <- unique(data$building_code)[building_nums == 1]
test_build2 <- unique(data$building_code)[building_nums == 2]
test_build3 <- unique(data$building_code)[building_nums == 2]
test_build4 <- unique(data$building_code)[building_nums == 4]
test_build5 <- unique(data$building_code)[building_nums == 5]
## making train and test data based on each fold
train_data1 <- data[!(data$building_code %in% test_build1),]
test_data1 <- data[data$building_code %in% test_build1,]
train_data2 <- data[!(data$building_code %in% test_build2),]
test_data2 <- data[data$building_code %in% test_build2,]
train_data3 <- data[!(data$building_code %in% test_build3),]
test_data3 <- data[data$building_code %in% test_build3,]
train_data4 <- data[!(data$building_code %in% test_build4),]
test_data4 <- data[data$building_code %in% test_build4,]
train_data5 <- data[!(data$building_code %in% test_build5),]
test_data5 <- data[data$building_code %in% test_build5,]
fold1_results <- gr_cv(train_data1, test_data1)
fold2_results <- gr_cv(train_data2, test_data2)
fold3_results <- gr_cv(train_data3, test_data3)
fold4_results <- gr_cv(train_data4, test_data4)
fold5_results <- gr_cv(train_data5, test_data5)
cbind(fold1_results[,1],(as.numeric(fold1_results[,2]) +
as.numeric(fold2_results[,2]) +
as.numeric(fold3_results[,2]) +
as.numeric(fold4_results[,2]) +
as.numeric(fold5_results[,2]))/5 )
# Partitioning based on observations
## setting each observation as being in fold 1-5
obs_nums <- sample(rep_len(1:5,nrow(data)))
obs_train_data1 <- data[obs_nums != 1,]
obs_test_data1 <- data[obs_nums == 1,]
obs_train_data2 <- data[obs_nums != 2,]
obs_test_data2 <- data[obs_nums == 2,]
obs_train_data3 <- data[obs_nums != 3,]
obs_test_data3 <- data[obs_nums == 3,]
obs_train_data4 <- data[obs_nums != 4,]
obs_test_data4 <- data[obs_nums == 4,]
obs_train_data5 <- data[obs_nums != 5,]
obs_test_data5 <- data[obs_nums == 5,]
obs_fold1_results <- gr_cv(obs_train_data1, obs_test_data1)
obs_fold2_results <- gr_cv(obs_train_data2, obs_test_data2)
obs_fold3_results <- gr_cv(obs_train_data3, obs_test_data3)
obs_fold4_results <- gr_cv(obs_train_data4, obs_test_data4)
obs_fold5_results <- gr_cv(obs_train_data5, obs_test_data5)
cbind(obs_fold1_results[,1],(as.numeric(obs_fold1_results[,2]) +
as.numeric(obs_fold2_results[,2]) +
as.numeric(obs_fold3_results[,2]) +
as.numeric(obs_fold4_results[,2]) +
as.numeric(obs_fold5_results[,2]))/5 )
pred_metrics <- c("Original model RMSE sqrt", "New model RSME sqrt",
"Original model median abs error sqrt",
"New model median abs error sqrt", "Original model RMSE",
"New model RMSE", "Random forest RMSE",
"Original Model median abs error",
"New Model median abs error",
"Random forest median abs error")
install.packages("e1071")
library(e1071)
data <- read.csv("C:\\Users\\bean_student\\Documents\\gr_model_data.csv")
modelsvm = svm(gr ~ ground_max +
log(Size) + temp_avg + Heated + Parapet,
data = train_data)
modelsvm = svm(gr ~ ground_max +
log(Size) + temp_avg + Heated + Parapet,
data = data)
summary(modelsvm)
forest_train <- na.omit(train_data[,c(2:5, 7, 11, 13, 19:22, 25:27, 33, 35)])
## making train and test data based on each fold
train_data1 <- data[!(data$building_code %in% test_build1),]
