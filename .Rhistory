model3 <- lm(sqrtgr ~ logground + wind_avg + temp_avg + roofflat +
Exposure + Heated + Insulated + lat + long, gr_all)
summary(model3)
min(na.omit(gr_all$wind_avg))
################# other ways to do weather ##################################
above_freeze <- data %>%
group_by(city_code, measurement, season) %>%
dplyr::filter(measurement == "temp") %>%
summarise(
above_freeze = sum(value > 32) / length(value),
start_date = min(date),
end_date = max(date)
)
### percentage days wind speed is over 10
winter_wind <- data %>%
dplyr::group_by(city_code, measurement, season) %>%
dplyr::filter(measurement == "wind") %>%
dplyr::summarise(
winter_wind = sum(value > 10) / length(value),
start_date = min(date),
end_date = max(date)
)
gr_total <- inner_join(gr_all, winter_wind, by = c("city_code", "season")) %>%
left_join(above_freeze, by = c("city_code", "season"))
colnames(gr_total)
gr_total <- gr_total[, c(-11, -12, -15, -16, -37, -38, -41, -42)]
#### aggregate overall wind and temp
above_freeze_all <- data %>%
group_by(city_code, measurement) %>%
dplyr::filter(measurement == "temp") %>%
summarise(
above_freeze_all = sum(value > 32) / length(value),
start_date = min(date),
end_date = max(date)
)
### percentage days wind speed is over 10
winter_wind_all <- data %>%
dplyr::group_by(city_code, measurement) %>%
dplyr::filter(measurement == "wind") %>%
dplyr::summarise(
winter_wind_all = sum(value > 10) / length(value),
start_date = min(date),
end_date = max(date)
)
gr_total <- inner_join(gr_total, winter_wind_all, by = c("city_code")) %>%
left_join(above_freeze_all, by = c("city_code"))
#### getting average wind and temps for 3 months only
data2 <- data %>%
dplyr::filter(lubridate::month(date) %in% c(12, 1, 2))
winter_wind_3month <- data2 %>%
group_by(city_code, measurement) %>%
dplyr::filter(measurement == "wind") %>%
summarise(
winter_wind_3month = sum(value > 10) / length(value),
start_date = min(date), end_date = max(date)
)
gr_total <- inner_join(gr_total, winter_wind_3month, by = c("city_code"))
############################ all this for the snow days stuff #################
# Group the data by building_code and season,
## and apply the function to each group
result_list <- data %>%
dplyr::group_by(building_code, season) %>%
dplyr::filter(measurement == "ground") %>%
dplyr::do(add_missing_dates(.))
# Combine the result list into a single data frame
final_result_df <- dplyr::bind_rows(result_list)
final_result_df$measurement <- "ground"
final_result_df$city_code <- zoo::na.locf(final_result_df$city_code)
final_result_df$building_code <- zoo::na.locf(final_result_df$building_code)
final_result_df$season <- zoo::na.locf(final_result_df$season)
final_result_df$value <- linear_impute(final_result_df$value)
winter_wind_snow <- data %>%
dplyr::group_by(city_code, date) %>%
dplyr::filter(measurement == "wind") %>%
dplyr::summarise(wind_val = mean(value)) %>%
dplyr::inner_join(final_result_df, by = c("city_code", "date")) %>%
dplyr::mutate(snow = ifelse(value > 1, 1, 0)) %>%
dplyr::group_by(building_code) %>%
dplyr::summarise(
winter_wind_snow =
sum(wind_val > 10 & snow == 1) / sum(snow == 1),
start_date = min(date),
end_date = max(date)
)
gr_total <- inner_join(gr_total, winter_wind_snow, by = c("building_code"))
gr_total <- gr_total[gr_total$gr <= 2, ]
gr_total2 <- gr_total
## doing og model with remaining data
model1 <- lm(sqrtgr ~ logground, gr_total)
summary(model1)
library(glmnet)
library(GGally)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(car)
library(cowplot)
library(RColorBrewer)
# version 1 of data
# gr_total <- read.csv("data-raw//wind_all.csv")
# version 2 of data
gr_total <- read.csv("data-raw//updated_data.csv")
null_model <- lm(sqrtgr ~ 1, gr_total)
summary(null_model)
## running models with wind
model1 <- lm(sqrtgr ~ logground, gr_total)
model2 <- lm(sqrtgr ~ logground + winter_wind, gr_total)
model3 <- lm(sqrtgr ~ logground + winter_wind_all, gr_total)
model4 <- lm(sqrtgr ~ logground + winter_wind_3month, gr_total)
model5 <- lm(sqrtgr ~ logground + winter_wind_snow, gr_total)
summary(model1)
log(0.04788)
ggplot(gr_total[gr_total$gr <= 2, ], aes(x = logground, y = sqrtgr)) +
geom_point() +
labs(
title = "",
x = "log ground snow load",
y = expression(sqrt(g[r]))
) +
geom_smooth(method = "lm", se = FALSE) +
theme_bw()  +
theme(
axis.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 14, face = "bold")
)
summary(model1)
ggplot(gr_total[gr_total$gr <= 2, ], aes(x = logground, y = sqrtgr)) +
geom_point() +
labs(
title = "",
x = "log ground snow load",
y = expression(sqrt(g[r]))
) +
geom_smooth(method = "lm", se = FALSE) +
geom_abline(intercept = 0.63, slope = -0.12, color = "red",
linetype = "dashed") +
theme_bw()  +
theme(
axis.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 14, face = "bold")
)
ggplot(gr_total[gr_total$gr <= 2, ], aes(x = logground, y = sqrtgr)) +
geom_point() +
labs(
title = "",
x = "log ground snow load",
y = expression(sqrt(g[r]))
) +
geom_smooth(method = "lm", se = FALSE) +
geom_abline(intercept = 0.63, slope = -0.12, color = "red") +
theme_bw()  +
theme(
axis.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 14, face = "bold")
)
ggplot(gr_total[gr_total$gr <= 2, ], aes(x = logground, y = sqrtgr)) +
geom_point() +
labs(
title = "",
x = "log ground snow load",
y = expression(sqrt(g[r]))
) +
geom_smooth(method = "lm", se = FALSE) +
geom_abline(intercept = 0.63, slope = -0.12, color = "red", size = 2) +
theme_bw()  +
theme(
axis.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 14, face = "bold")
)
ggplot(gr_total[gr_total$gr <= 2, ], aes(x = logground, y = sqrtgr)) +
geom_point() +
labs(
title = "",
x = "log ground snow load",
y = expression(sqrt(g[r]))
) +
geom_smooth(method = "lm", se = FALSE) +
geom_abline(intercept = 0.63, slope = -0.12, color = "red", linewidth = 2) +
theme_bw()  +
theme(
axis.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 14, face = "bold")
)
ggplot(gr_total[gr_total$gr <= 2, ], aes(x = logground, y = sqrtgr)) +
geom_point() +
labs(
title = "",
x = "log ground snow load",
y = expression(sqrt(g[r]))
) +
geom_smooth(method = "lm", se = FALSE) +
geom_abline(intercept = 0.63, slope = -0.12, color = "red", linewidth = 1) +
theme_bw()  +
theme(
axis.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 14, face = "bold")
)
ggplot(gr_total[gr_total$gr <= 2, ], aes(x = logground, y = sqrtgr)) +
geom_point() +
labs(
title = "",
x = "log ground snow load",
y = expression(sqrt(g[r]))
) +
geom_smooth(method = "lm", se = FALSE, linewidth = 1.5) +
geom_abline(intercept = 0.63, slope = -0.12, color = "red", linewidth = 1.5) +
theme_bw()  +
theme(
axis.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 14, face = "bold")
)
## Modeling work
library(glmnet)
library(GGally)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(car)
library(cowplot)
library(RColorBrewer)
# version 1 of data
# gr_total <- read.csv("data-raw//wind_all.csv")
# version 2 of data
gr_total <- read.csv("data-raw//updated_data.csv")
null_model <- lm(sqrtgr ~ 1, gr_total)
summary(null_model)
## running models with wind
model1 <- lm(sqrtgr ~ logground, gr_total)
model2 <- lm(sqrtgr ~ logground + winter_wind, gr_total)
model3 <- lm(sqrtgr ~ logground + winter_wind_all, gr_total)
model4 <- lm(sqrtgr ~ logground + winter_wind_3month, gr_total)
model5 <- lm(sqrtgr ~ logground + winter_wind_snow, gr_total)
summary(model1)
summary(model2)
summary(model3)
summary(model4)
summary(model5)
ggplot(gr_total[gr_total$gr <= 2, ], aes(x = logground, y = sqrtgr)) +
geom_point() +
labs(
title = "",
x = "log ground snow load",
y = expression(sqrt(g[r]))
) +
geom_smooth(method = "lm", se = FALSE, linewidth = 1.5) +
geom_abline(intercept = 0.63, slope = -0.12, color = "red", linewidth = 1.5) +
theme_bw()  +
theme(
axis.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 14, face = "bold")
)
### Now running model with ERA5 wind
model_grid <- lm(sqrtgr ~ logground + est_wind, gr_total)
summary(model_grid)
## obtaining resids from original model
gr_total$resid <- residuals(model1)
resid_data <- gr_total |> dplyr::select(
wind_avg, temp_avg, Slope,
roofflat, Size, exposed, sheltered, Heated,
Insulated, Parapet, winter_wind_all,
above_freeze_all, slope15, resid
)
resid_no_na <- na.omit(resid_data)
### Creating tree to look for interactions
tree <- rpart(formula = resid ~ ., data = resid_no_na)
prp(tree)
pruned_tree <- prune(tree, cp = 0.04)
prp(pruned_tree)
prp(pruned_tree, box.palette = "auto")
prp(pruned_tree, box.palette = "auto")
plot(pruned_tree)
text(pruned_tree, use.n=TRUE)
plot(pruned_tree)
text(pruned_tree, use.n=TRUE)
library(partykit)
party_tree <- as.party(pruned_tree)
install.packages("partykit")
library(partykit)
party_tree <- as.party(pruned_tree)
# Plot the tree
plot(party_tree)
# Plot the tree
plot(party_tree, tp_args = list(pretty = FALSE))
# Plot the tree
plot(party_tree, terminal_panel = NULL)
# Plot the tree
plot(tree)
# Plot the tree
plot(pruned_tree)
text(pruned_tree, use.n=TRUE)
# Plot the tree
plot(pruned_tree)
text(pruned_tree, use.n=FALSE)
text(pruned_tree, use.n=FALSE, pretty = TRUE)
# Plot the tree
plot(pruned_tree)
text(pruned_tree, use.n=FALSE, pretty = TRUE)
## Modeling work
library(glmnet)
library(GGally)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(car)
library(cowplot)
library(RColorBrewer)
library(partykit)
# version 1 of data
# gr_total <- read.csv("data-raw//wind_all.csv")
# version 2 of data
gr_total <- read.csv("data-raw//updated_data.csv")
null_model <- lm(sqrtgr ~ 1, gr_total)
summary(null_model)
## running models with wind
model1 <- lm(sqrtgr ~ logground, gr_total)
model2 <- lm(sqrtgr ~ logground + winter_wind, gr_total)
model3 <- lm(sqrtgr ~ logground + winter_wind_all, gr_total)
model4 <- lm(sqrtgr ~ logground + winter_wind_3month, gr_total)
model5 <- lm(sqrtgr ~ logground + winter_wind_snow, gr_total)
summary(model1)
summary(model2)
summary(model3)
summary(model4)
summary(model5)
ggplot(gr_total[gr_total$gr <= 2, ], aes(x = logground, y = sqrtgr)) +
geom_point() +
labs(
title = "",
x = "log ground snow load",
y = expression(sqrt(g[r]))
) +
geom_smooth(method = "lm", se = FALSE, linewidth = 1.5) +
geom_abline(intercept = 0.63, slope = -0.12, color = "red", linewidth = 1.5) +
theme_bw()  +
theme(
axis.text = element_text(size = 12, face = "bold"),
axis.title = element_text(size = 14, face = "bold")
)
### Now running model with ERA5 wind
model_grid <- lm(sqrtgr ~ logground + est_wind, gr_total)
summary(model_grid)
## obtaining resids from original model
gr_total$resid <- residuals(model1)
resid_data <- gr_total |> dplyr::select(
wind_avg, temp_avg, Slope,
roofflat, Size, exposed, sheltered, Heated,
Insulated, Parapet, winter_wind_all,
above_freeze_all, slope15, resid
)
resid_no_na <- na.omit(resid_data)
### Creating tree to look for interactions
tree <- rpart(formula = resid ~ ., data = resid_no_na)
prp(tree)
pruned_tree <- prune(tree, cp = 0.04)
# Plot the tree
plot(pruned_tree)
text(pruned_tree, use.n=FALSE, pretty = TRUE)
## Setting up
## Starts as all variables, plus interactions
resid_all <- lm(
resid ~ . + roofflat * winter_wind_all + roofflat * wind_avg +
roofflat * sheltered + slope15 * winter_wind_all +
slope15 * wind_avg + slope15 * sheltered,
resid_no_na
)
resid_int <- lm(resid ~ 1, resid_no_na)
## Running forward and backward regression
resid_forward <- step(resid_int,
direction = "both", scope = formula(resid_all),
trace = 1
)
resid_backward <- step(resid_all,
direction = "both", scope = formula(resid_all),
trace = 1
)
summary(resid_forward)
summary(resid_backward)
## Running Lasso regression here
## Adding interaction columns to resid_no_na
resid_no_na$w2rf <- resid_no_na$winter_wind_all * resid_no_na$roofflat
resid_no_na$warf <- resid_no_na$wind_avg * resid_no_na$roofflat
resid_no_na$shrf <- resid_no_na$sheltered * resid_no_na$roofflat
colnames(resid_no_na)
y <- resid_no_na$resid
x <- data.matrix(resid_no_na[, c(1:12, 15:17)])
cv_model <- cv.glmnet(x, y, alpha = 1)
best_lambda <- cv_model$lambda.min
best_lambda
best_model <- glmnet(x, y, alpha = 1, lambda = best_lambda)
coef(best_model)
best_model <- glmnet(x, y, alpha = 1, lambda = 1)
coef(best_model)
best_model <- glmnet(x, y, alpha = 1, lambda = 0.0001)
coef(best_model)
best_model <- glmnet(x, y, alpha = 1, lambda = 0.001)
coef(best_model)
remove_model <- glmnet(x, y, alpha = 1, lambda = 0.001)
coef(remove_model)
remove_model <- glmnet(x, y, alpha = 1, lambda = 0.005)
coef(remove_model)
remove_model <- glmnet(x, y, alpha = 1, lambda = 0.003)
coef(remove_model)
remove_model <- glmnet(x, y, alpha = 1, lambda = 0.002)
coef(remove_model)
summary(resid_forward)
coef(remove_model)
#Density plots of each exposure level with GR
ggplot(na.omit(gr_total[,c("Exposure", "sqrtgr")]),
aes(x = sqrtgr, color = factor(Exposure,
levels = unique(gr_total$Exposure),
labels =
c("exposed", "sheltered", "normal")))) +
geom_density(alpha = 0.5, linewidth = 1) +
labs(
x = expression(sqrt(g[r])),
y = "Density",
fill = "Exposure") +
theme_bw() +
scale_color_brewer(palette = "Dark2", name = "Exposure")
#Density plots of each exposure level with GR
ggplot(na.omit(gr_total[,c("Exposure", "sqrtgr")]),
aes(x = sqrtgr, color = factor(Exposure,
levels = unique(gr_total$Exposure),
labels =
c("exposed", "sheltered", "normal")))) +
geom_density(alpha = 0.5, linewidth = 1) +
labs(
x = expression(sqrt(g[r])),
y = "Density",
fill = "Exposure") +
theme_bw() +
scale_color_brewer(palette = "Dark2", name = "Exposure")  +
theme(legend.position = c(0.85, 0.85))
#Density plots of each exposure level with GR
ggplot(na.omit(gr_total[,c("Exposure", "sqrtgr")]),
aes(x = sqrtgr, color = factor(Exposure,
levels = unique(gr_total$Exposure),
labels =
c("exposed", "sheltered", "normal")))) +
geom_density(alpha = 0.5, linewidth = 1) +
labs(
x = expression(sqrt(g[r])),
y = "Density",
fill = "Exposure") +
theme_bw() +
scale_color_brewer(palette = "Dark2", name = "Exposure")  +
theme(legend.position = "topright")
#Density plots of each exposure level with GR
ggplot(na.omit(gr_total[,c("Exposure", "sqrtgr")]),
aes(x = sqrtgr, color = factor(Exposure,
levels = unique(gr_total$Exposure),
labels =
c("exposed", "sheltered", "normal")))) +
geom_density(alpha = 0.5, linewidth = 1) +
labs(
x = expression(sqrt(g[r])),
y = "Density",
fill = "Exposure") +
theme_bw() +
scale_color_brewer(palette = "Dark2", name = "Exposure")  +
theme(legend.position = "top right")
#Density plots of each exposure level with GR
ggplot(na.omit(gr_total[,c("Exposure", "sqrtgr")]),
aes(x = sqrtgr, color = factor(Exposure,
levels = unique(gr_total$Exposure),
labels =
c("exposed", "sheltered", "normal")))) +
geom_density(alpha = 0.5, linewidth = 1) +
labs(
x = expression(sqrt(g[r])),
y = "Density",
fill = "Exposure") +
theme_bw() +
scale_color_brewer(palette = "Dark2", name = "Exposure")  +
theme(legend.position = c(0.85, 0.85))
#Density plots of each exposure level with GR
ggplot(na.omit(gr_total[,c("Exposure", "sqrtgr")]),
aes(x = sqrtgr, color = factor(Exposure,
levels = unique(gr_total$Exposure),
labels =
c("exposed", "sheltered", "normal")))) +
geom_density(alpha = 0.5, linewidth = 1) +
labs(
x = expression(sqrt(g[r])),
y = "Density",
fill = "Exposure") +
theme_bw() +
scale_color_brewer(palette = "Dark2", name = "Exposure")  +
theme(legend.position = c(0.85, 0.8))
#Density plots of each exposure level with GR
ggplot(na.omit(gr_total[,c("Exposure", "sqrtgr")]),
aes(x = sqrtgr, color = factor(Exposure,
levels = unique(gr_total$Exposure),
labels =
c("exposed", "sheltered", "normal")))) +
geom_density(alpha = 0.5, linewidth = 1) +
labs(
x = expression(sqrt(g[r])),
y = "Density",
fill = "Exposure") +
theme_bw() +
scale_color_brewer(palette = "Dark2", name = "Exposure")  +
theme(legend.position = c(0.9, 0.8))
## Running forward and backward regression
resid_forward <- step(resid_int,
direction = "both", scope = formula(resid_all),
trace = 1
)
#### Drop slope due to insignificance and having roofflat
build_mod <- lm(formula = sqrtgr ~ logground + logsize + Parapet + roofflat +
sheltered + roofflat:sheltered, data = gr_total)
summary(build_mod)
