ggpairs(gr_vars)
ggpairs(gr_total |> select(sqrtgr, logground, wind_avg, temp_avg,
roofflat, Size, Exposure,  Insulated,
Parapet))
ggpairs(gr_total |> select(sqrtgr, logground, wind_avg, temp_avg,
Size))
length(gr_total$wind_avg)
length(gr_total$size)
length(gr_total$Size)
plot(model_new)
plot(model_new)
par(mfrow = c(2,2))
plot(model(new))
plot(model_new)
vif(model_new)
library(car)
vif(model_new)
par(mfrow = c(1,1))
plot(model_new)
model_new$residuals
shapiro.test(model_new$residuals)
plot(model_new)
## Trying with winter_wind_all
mod2 <- lm(sqrtgr ~ logground + winter_wind_all + temp_avg +
roofflat + Size + Exposure +  Insulated +
Parapet + roofflat*Exposure + roofflat*winter_wind_all,
data = gr_total)
ggpairs(gr_total |> select(sqrtgr, logground, winter_wind_all, temp_avg,
Size))
plot(mod2)
shapiro.test(mod2$residuals)
plot(mod2)
qqplot(mod2$residuals)
qqplot(resid(mod2))
qqnorm(resid(mod2))
qqline(mod2$residuals)
plot(mod2$fitted.values, mod2$residuals)
abline(0,0)
plot(mod2$fitted.values, mod2$residuals, xlab = "fitted values")
plot(mod2$fitted.values, mod2$residuals, xlab = "Fitted values",
ylab = "residuals", title = "W2 redsidual plot")
plot(mod2$fitted.values, mod2$residuals, xlab = "Fitted values",
ylab = "residuals", main = "W2 redsidual plot")
abline(0,0)
par(mfrow = c(1,3))
plot(gr_total$sqrtgr, gr_total$winter_wind_all)
qqnorm(resid(mod2))
qqline(mod2$residuals)
plot(mod2$fitted.values, mod2$residuals, xlab = "Fitted values",
ylab = "Residuals", main = "W2 redsidual plot")
abline(0,0)
par(mfrow = c(3,1))
plot(gr_total$sqrtgr, gr_total$winter_wind_all)
qqnorm(resid(mod2))
qqline(mod2$residuals)
plot(mod2$fitted.values, mod2$residuals, xlab = "Fitted values",
ylab = "Residuals", main = "W2 redsidual plot")
abline(0,0)
par(mfrow = c(1,1))
plot(gr_total$sqrtgr, gr_total$winter_wind_all)
plot(gr_total$sqrtgr, gr_total$winter_wind)
_all
plot(gr_total$sqrtgr, gr_total$winter_wind_all)
View(winter_wind_all)
View(gr_total)
library(knitr)
opts_knit$set(self.contained = FALSE)
library(spatial)
library(sf)
library(spatstat)
drumlins <- ppinit("drumlin.dat")
class(drumlins)
summary(drumlins)
drumlins$x[1:10]
drumlins$y[1:10]
drumlins$area
drumlinsDF <- as.data.frame(cbind(x = drumlins$x, y = drumlins$y))
drumlinsSF <- st_as_sf(drumlinsDF, coords = c("x", "y"))
class(drumlinsSF)
drumlinsSF
plot(drumlinsSF)
drumlinsPPP <- as.ppp(drumlinsSF)
class(drumlinsPPP)
drumlinsPPP
plot(drumlinsPPP)
bb <- bounding.box.xy(drumlinsPPP)
ch <- convexhull.xy(drumlinsPPP)
rr <- ripras(drumlinsPPP)
drumlinsRR <- ppp(drumlinsPPP$x, drumlinsPPP$y, window = rr)
class(drumlinsRR)
drumlinsRR
plot(drumlinsRR, col = "#0000FF80", axes = TRUE)
plot(bb, col = "#FF000040", add = TRUE)
plot(ch, col = "#F0F00060", add = TRUE)
par(mfrow = c(2, 3))
qc <- quadratcount(drumlinsPPP)
class(qc)
plot(qc)
qc4 <- quadratcount(drumlinsPPP, nx = 4)
plot(qc4)
qc6 <- quadratcount(drumlinsPPP, nx = 6)
plot(qc6)
qcrr <- quadratcount(drumlinsRR)
plot(qcrr)
qc4rr <- quadratcount(drumlinsRR, nx = 4)
plot(qc4rr)
qc6rr <- quadratcount(drumlinsRR, nx = 6)
plot(qc6rr)
k025 <- density(drumlinsRR, sigma = 0.25)
class(k025)
k050 <- density(drumlinsRR, sigma = 0.50)
k075 <- density(drumlinsRR, sigma = 0.75)
k100 <- density(drumlinsRR, sigma = 1.00)
par(mfrow = c(2, 2))
image(k025)
plot(drumlinsPPP, add = TRUE, pch = 3, border = "blue", col = "black", lwd = 2)
image(k050)
plot(drumlinsPPP, add = TRUE, pch = 3, border = "blue", col = "black", lwd = 2)
image(k075)
plot(drumlinsPPP, add = TRUE, pch = 3, border = "blue", col = "black", lwd = 2)
image(k100)
plot(drumlinsPPP, add = TRUE, pch = 3, border = "blue", col = "black", lwd = 2)
k025qu <- density(drumlinsRR, sigma = 0.25, kernel = "quartic")
k050qu <- density(drumlinsRR, sigma = 0.50, kernel = "quartic")
k075qu <- density(drumlinsRR, sigma = 0.75, kernel = "quartic")
k100qu <- density(drumlinsRR, sigma = 1.00, kernel = "quartic")
par(mfrow = c(2, 2))
image(k025qu)
plot(drumlinsPPP, add = TRUE, pch = 3, border = "blue", col = "black", lwd = 2)
image(k050qu)
plot(drumlinsPPP, add = TRUE, pch = 3, border = "blue", col = "black", lwd = 2)
image(k075qu)
plot(drumlinsPPP, add = TRUE, pch = 3, border = "blue", col = "black", lwd = 2)
image(k100qu)
plot(drumlinsPPP, add = TRUE, pch = 3, border = "blue", col = "black", lwd = 2)
summary(k025)
summary(k025qu)
summary(k050)
summary(k050qu)
summary(k075)
summary(k075qu)
summary(k100)
summary(k100qu)
library(rgl)
# create matrix and transpose it to get the directions right
z <- t(as(k025, "matrix"))
# set missing values to 0
z[is.na(z)] <- 0
class(z)
x <- 1:nrow(z)
y <- 1:ncol(z)
bg3d(color = "white")
clear3d()
view3d(theta = 350, phi = 35)
surface3d(x, y, z)
axis3d("x", pos = c(0, 0, 0))
library(spatstat)
library(RandomFields)
library(magrittr)
clarkevans.test(drumlinsPPP, correction = "none")
clarkevans.test(drumlinsPPP,
correction = "none",
alternative = "regular"
)
clarkevans.test(drumlinsPPP, correction = "Donnelly")
clarkevans.test(drumlinsPPP,
correction = "Donnelly",
alternative = "regular"
)
clarkevans.test(drumlinsRR,
correction = "guard",
clipregion = erosion.owin(rr, r = 1)
)
clarkevans.test(drumlinsRR,
correction = "guard",
clipregion = erosion.owin(rr, r = 1),
alternative = "regular"
)
clarkevans.test(drumlinsRR,
correction = "guard",
clipregion = erosion.owin(rr, r = 1)
)
clarkevans.test(drumlinsRR,
correction = "guard",
clipregion = erosion.owin(rr, r = 1),
alternative = "regular"
)
hopskel.test(drumlinsPPP, nsim = 99999)
hopskel.test(drumlinsPPP, nsim = 99999)
hopskel.test(drumlinsPPP, nsim = 99999)
hopskel.test(drumlinsPPP,
nsim = 99999,
alternative = "regular"
)
hopskel.test(drumlinsPPP,
nsim = 99999,
alternative = "regular"
)
hopskel.test(drumlinsPPP,
nsim = 99999,
alternative = "regular"
)
hopskel.test(drumlinsRR, nsim = 99999)
hopskel.test(drumlinsRR, nsim = 99999)
hopskel.test(drumlinsRR, nsim = 99999)
hopskel.test(drumlinsRR,
nsim = 99999,
alternative = "regular"
)
hopskel.test(drumlinsRR,
nsim = 99999,
alternative = "regular"
)
hopskel.test(drumlinsRR,
nsim = 99999,
alternative = "regular"
)
# Run each of these multiple times. Are the results similar?
@
par(mfrow = c(1, 1))
n <- drumlinsRR$n
ex <- expression(runifpoint(n, win = rr))
res <- envelope(drumlinsRR, Gest,
nsim = 39, simulate = ex,
verbose = FALSE, savefuns = TRUE
)
plot(res, xlim = c(0, 0.7))
r <- seq(0, 2.0, by = 0.01)
ex <- expression(runifpoint(n, win = rr))
res <- envelope(drumlinsRR,
Lest,
nsim = 99,
simulate = ex, r = r,
verbose = TRUE, savefuns = TRUE
)
class(res)
names(res)
par(mar = c(5, 5, 4, 2))
plot(res$r, res$obs - res$r,
type = "l",
ylim = c(-0.15, 0.08),
col = "red", lwd = 2,
xlab = "r",
ylab = expression(hat(L)(r)),
main = "CSR Simulation"
)
lines(res$r, res$hi - res$r)
lines(res$r, res$lo - res$r)
# attributes(res)
simfuns <- as.data.frame(attr(res, "simfuns"))
dim(simfuns)
simfuns[1:5, 1:5]
simfuns <- as.data.frame(attr(res, "simfuns"))[, -1]
dim(simfuns)
simfuns[1:5, 1:5]
sapply(simfuns, function(x) lines(res$r, x - res$r, col = "#80808060"))
par(mfrow = c(1,3))
plot(gr_total$sqrtgr, gr_total$winter_wind_all)
qqnorm(resid(mod2))
qqline(mod2$residuals)
plot(mod2$fitted.values, mod2$residuals, xlab = "Fitted values",
ylab = "Residuals", main = "W2 redsidual plot")
abline(0,0)
plot(gr_total$sqrtgr, gr_total$winter_wind_all, xlab= "sqrtgr", ylab = "W2",
main = "W2 and sqrt GR plot")
qqnorm(resid(mod2))
qqline(mod2$residuals)
plot(mod2$fitted.values, mod2$residuals, xlab = "Fitted values",
ylab = "Residuals", main = "W2 redsidual plot")
abline(0,0)
summary(mod2)
summary(model_new)
summary(model_new)
summary(mod2)
og_mod <- lm(sqrtgr ~ loggroun, data = gr_total)
og_mod <- lm(sqrtgr ~ logground, data = gr_total)
summary(og_mod)
library(glmnet)
library(GGally)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(car)
gr_total <- read.csv("data-raw//wind_all.csv")
## adding above or below 15 slope
gr_total$slope15 <- ifelse(gr_total$Slope > 15, 1, 0)
gr_total <- gr_total[gr_total$gr <= 2,]
model1 <- lm(sqrtgr ~ logground, gr_total)
## obtaining resids from original model
gr_total$resid <- residuals(model1)
resid_data <- gr_total |> select(wind_avg, temp_avg, Slope,
roofflat, Size, Exposure, Heated, Insulated,
Parapet, winter_wind_all, above_freeze_all,
slope15, resid)
resid_no_na <- na.omit(resid_data)
## Setting up
resid_all <- lm(resid ~ ., resid_no_na)
resid_int <- lm(resid ~ 1, resid_no_na)
## Running forward and backward regression
resid_forward <- step(resid_int, direction='both', scope=formula(resid_all),
trace=0)
resid_backward <- step(resid_all, direction='both', scope=formula(resid_all),
trace=0)
resid_forward
resid_backward
## Running Lasso regression here
y <- resid_no_na$resid
x <- data.matrix(resid_no_na[, 1:12])
cv_model <- cv.glmnet(x, y, alpha = 1)
best_lambda <- cv_model$lambda.min
best_lambda
best_model <- glmnet(x, y, alpha = 1, lambda = best_lambda)
coef(best_model)
## subset for vars in step regression
gr_vars <- resid_no_na |> select(wind_avg, temp_avg,
roofflat, Size, Exposure, Insulated,
Parapet, winter_wind_all,
resid)
resid_vars <- na.omit(gr_vars)
ggpairs(gr_vars)
## look at tree to see interactions
tree <- rpart(formula = resid ~ ., data = resid_vars)
prp(tree)
## look at tree to see interactions
tree <- rpart(formula = resid ~ ., data = resid_vars)
prp(tree)
pruned_tree <- prune(tree, cp = 0.04)
prp(pruned_tree)
## Running model based on selector methods
model_new <- lm(sqrtgr ~ logground + wind_avg + temp_avg +
roofflat + Size + Exposure +  Insulated +
Parapet + roofflat*Exposure + roofflat*wind_avg,
data = gr_total)
summary(model_new)
og_mod <- lm(sqrtgr ~ logground, data = gr_total)
summary(og_mod)
ggpairs(gr_total |> select(sqrtgr, logground, wind_avg, temp_avg,
Size))
plot(model_new)
library(GGally)
library(ggplot2)
data <- read.csv("D:\\complete_data.csv")
metadata <- read.csv("D:\\gr_meta_ca_all.csv")
data$season <- rep(NA, nrow(data))
data$date <- as.Date(data$date)
data$season <- ifelse((data$date > as.Date("1957-07-01") &
data$date < as.Date("1958-07-01")), 2, data$season)
data$season <- ifelse((data$date > as.Date("1958-07-01") &
data$date < as.Date("1959-07-01")), 3, data$season)
data$season <- ifelse((data$date > as.Date("1959-07-01") &
data$date < as.Date("1960-07-01")), 4, data$season)
data$season <- ifelse((data$date > as.Date("1960-07-01") &
data$date < as.Date("1961-07-01")), 5, data$season)
data$season <- ifelse((data$date > as.Date("1961-07-01") &
data$date < as.Date("1962-07-01")), 6, data$season)
data$season <- ifelse((data$date > as.Date("1962-07-01") &
data$date < as.Date("1963-07-01")), 7, data$season)
data$season <- ifelse((data$date > as.Date("1963-07-01") &
data$date < as.Date("1964-07-01")), 8, data$season)
data$season <- ifelse((data$date > as.Date("1964-07-01") &
data$date < as.Date("1965-07-01")), 9, data$season)
data$season <- ifelse((data$date > as.Date("1965-07-01") &
data$date < as.Date("1966-07-01")), 10, data$season)
data$season <- ifelse((data$date > as.Date("1966-07-01") &
data$date < as.Date("1967-07-01")), 11, data$season)
library(dplyr)
library(lubridate)
ground_max <- data %>%
group_by(building_code, city_code, season) %>%
dplyr::filter(measurement == "ground") %>%
summarise(ground_max = max(value))
roof_max <- data %>%
group_by(building_code, city_code, season) %>%
dplyr::filter(mma == "avg") %>%
summarise(roof_max = max(value))
gr_data <- inner_join(ground_max, roof_max, by = c("building_code", "city_code",
"season"))
gr_data$gr <- gr_data$roof_max / gr_data$ground_max
### dplyr::filtering out the arch hangars
arch_hangars <- c("clab02", "cxbc02", "nbon02", "oton07", "wnmb04")
gr_data2 <- gr_data %>%
dplyr::filter(!(building_code %in% arch_hangars))
nrow(gr_data)
nrow(gr_data2)
### reproducing linear model
gr_data2$sqrtgr <- sqrt(gr_data2$gr)
gr_data2$logground <- log(gr_data2$ground_max)
model <- lm(sqrtgr ~ logground, data = gr_data2)
summary(model)
wind_avgs <-  data %>%
group_by(city_code, measurement) %>%
dplyr::filter(measurement == "wind") %>%
summarise(wind_avg = mean(value), start_date = min(date),
end_date = max(date))
temp_avgs <-  data %>%
group_by(city_code, measurement) %>%
dplyr::filter(measurement == "temp") %>%
summarise(temp_avg = mean(value), start_date = min(date),
end_date = max(date))
nrow(temp_avgs)
gr_data3 <- left_join(gr_data2, wind_avgs, by = c("city_code"))
gr_data_weather <- left_join(gr_data3, temp_avgs, by = c("city_code"))
gr_data_weather$sqrtgr <- sqrt(gr_data_weather$gr)
gr_data_weather$logground <- log(gr_data_weather$ground_max)
model <- lm(sqrtgr ~ logground, data = gr_data_weather)
summary(model)
model2 <- lm(sqrtgr ~ logground + wind_avg + temp_avg, gr_data_weather)
summary(model2)
pairs(gr_data_weather[,c(7,8,10,12)])
gr_all <- inner_join(gr_data_weather, metadata,
by = c("building_code", "city_code"))
gr_all$roofflat <- ifelse(gr_all$Roof_Type == "Flat" , 1, 0)
model3 <- lm(sqrtgr ~ logground + wind_avg + temp_avg + roofflat +
Exposure + Heated + Insulated + lat + long, gr_all)
summary(model3)
min(na.omit(gr_all$wind_avg))
################# other ways to do weather ##################################
above_freeze <-  data %>%
group_by(city_code, measurement, season) %>%
dplyr::filter(measurement == "temp") %>%
summarise(above_freeze = sum(value > 32)/length(value),
start_date = min(date),
end_date = max(date))
### percentage days wind speed is over 10
winter_wind <-  data %>%
dplyr::group_by(city_code, measurement, season) %>%
dplyr::filter(measurement == "wind") %>%
dplyr::summarise(winter_wind = sum(value > 10)/length(value),
start_date = min(date),
end_date = max(date))
gr_total <- inner_join(gr_all, winter_wind, by = c("city_code", "season")) %>%
left_join(above_freeze, by = c("city_code", "season"))
colnames(gr_total)
gr_total <- gr_total[,c(-11,-12,-15,-16,-37,-38, -41, -42 )]
#### aggregate overall wind and temp
above_freeze_all <-  data %>%
group_by(city_code, measurement) %>%
dplyr::filter(measurement == "temp") %>%
summarise(above_freeze_all = sum(value > 32)/length(value),
start_date = min(date),
end_date = max(date))
### percentage days wind speed is over 10
winter_wind_all <-  data %>%
dplyr::group_by(city_code, measurement) %>%
dplyr::filter(measurement == "wind") %>%
dplyr::summarise(winter_wind_all = sum(value > 10)/length(value),
start_date = min(date),
end_date = max(date))
gr_total <- inner_join(gr_total, winter_wind_all, by = c("city_code")) %>%
left_join(above_freeze_all, by = c("city_code"))
#### getting average wind and temps for 3 months only
data2 <- data %>%
dplyr::filter(month(date) %in% c(12,1,2))
winter_wind_3month <-  data2 %>%
group_by(city_code, measurement) %>%
dplyr::filter(measurement == "wind") %>%
summarise(winter_wind_3month = sum(value > 10)/length(value),
start_date = min(date), end_date = max(date))
gr_total <- inner_join(gr_total, winter_wind_3month, by = c("city_code"))
############################ all this for the snow days stuff #################
# Group the data by building_code and season, and apply the function to each group
result_list <- data %>%
dplyr::group_by(building_code, season) %>%
dplyr::filter(measurement == "ground") %>%
dplyr::do(add_missing_dates(.))
# Combine the result list into a single data frame
final_result_df <- dplyr::bind_rows(result_list)
final_result_df$measurement = "ground"
final_result_df$city_code <- zoo::na.locf(final_result_df$city_code)
final_result_df$building_code <- zoo::na.locf(final_result_df$building_code)
final_result_df$season <- zoo::na.locf(final_result_df$season)
final_result_df$value <- linear_impute(final_result_df$value)
winter_wind_snow <- data %>%
dplyr::group_by(city_code, date) %>%
dplyr::filter(measurement == "wind") %>%
dplyr::summarise(wind_val = mean(value)) %>%
dplyr::inner_join(final_result_df, by =  c("city_code", "date")) %>%
dplyr::mutate(snow = ifelse(value > 1, 1, 0)) %>%
dplyr::group_by(building_code) %>%
dplyr::summarise(winter_wind_snow =
sum(wind_val > 10 & snow == 1)/sum(snow == 1),
start_date = min(date),
end_date = max(date))
gr_total <- inner_join(gr_total, winter_wind_snow, by = c("building_code"))
## doing og model with remaining data
model1 <- lm(sqrtgr ~ logground, gr_total)
model2 <- lm(sqrtgr ~ logground + winter_wind, gr_total)
model3 <- lm(sqrtgr ~ logground + winter_wind_all, gr_total)
model4 <- lm(sqrtgr ~ logground + winter_wind_3month, gr_total)
model5 <- lm(sqrtgr ~ logground + winter_wind_snow, gr_total)
summary(model1)
gr_total <- read.csv("data-raw//wind_all.csv")
og_mod <- lm(sqrtgr ~ logground, data = gr_total)
summary(og_mod)
nrow(gr_total)
gr_total <- gr_total[gr_total$gr <= 2,]
og_mod <- lm(sqrtgr ~ logground, data = gr_total)
summary(og_mod)
summary(model_new)
summary(mod2)
summary(mod2)
summary(og_mod)
nrow(gr_total)
## Comaring metrics
AIC(model_new)
AIC(mod2)
AIC(og_mod)
BIC(model_new)
BIC(mod2)
BIC(og_mod)
data <- read.csv("data-raw/wind_all.csv")
acc_test(data = data)
