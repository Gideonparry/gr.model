fold4_results[[6]], fold5_results[[6]])
new_gr_preds <- c(fold1_results[[7]], fold2_results[[7]], fold3_results[[7]],
fold4_results[[7]], fold5_results[[7]])
rf_gr_preds <- c(fold1_results[[8]], fold2_results[[8]], fold3_results[[8]],
fold4_results[[8]], fold5_results[[8]])
train_avg <- c(fold1_results[[9]], fold2_results[[9]], fold3_results[[9]],
fold4_results[[9]], fold5_results[[9]])
# rmse(sqrt_gr_test, og_sqrt_preds)
#rmse(sqrt_gr_test[!is.na(new_sqrt_preds)], na.omit(new_sqrt_preds))
#median(abs(sqrt_gr_test - og_sqrt_preds))
#median(abs(sqrt_gr_test[!is.na(new_sqrt_preds)] - na.omit(new_sqrt_preds)))
rmse_null <- Metrics::rmse(gr_test, train_avg)
rmse_og_build <- Metrics::rmse(gr_test, og_gr_preds)
rmse_new_build <- Metrics::rmse(gr_test[!is.na(new_gr_preds)],
na.omit(new_gr_preds))
rmse_rf_build <- Metrics::rmse(rf_gr_test[!is.na(rf_gr_preds)],
na.omit(rf_gr_preds))
mdae_null_build <- stats::median(abs((gr_test - train_avg)))
mdae_og_build <- stats::median(abs((gr_test - og_gr_preds)))
mdae_new_build <- stats::median(abs((gr_test[!is.na(new_gr_preds)] -
na.omit(new_gr_preds))))
mdae_rf_build <- stats::median(abs((rf_gr_test[!is.na(rf_gr_preds)] -
na.omit(rf_gr_preds))))
# Partitioning based on observations
## setting each observation as being in fold 1-5
obs_nums <- sample(rep_len(1:5,nrow(data)))
obs_train_data1 <- data[obs_nums != 1,]
obs_test_data1 <- data[obs_nums == 1,]
obs_train_data2 <- data[obs_nums != 2,]
obs_test_data2 <- data[obs_nums == 2,]
obs_train_data3 <- data[obs_nums != 3,]
obs_test_data3 <- data[obs_nums == 3,]
obs_train_data4 <- data[obs_nums != 4,]
obs_test_data4 <- data[obs_nums == 4,]
obs_train_data5 <- data[obs_nums != 5,]
obs_test_data5 <- data[obs_nums == 5,]
obs_fold1_results <- gr_cv(obs_train_data1, obs_test_data1,
formula1 = formula1,
forumula2 = formula2,
rf_formula = rf_formula)
obs_fold2_results <- gr_cv(obs_train_data2, obs_test_data2,
formula1 = formula1,
forumula2 = formula2,
rf_formula = rf_formula)
obs_fold3_results <- gr_cv(obs_train_data3, obs_test_data3,
formula1 = formula1,
forumula2 = formula2,
rf_formula = rf_formula)
obs_fold4_results <- gr_cv(obs_train_data4, obs_test_data4,
formula1 = formula1,
forumula2 = formula2,
rf_formula = rf_formula)
obs_fold5_results <- gr_cv(obs_train_data5, obs_test_data5,
formula1 = formula1,
forumula2 = formula2,
rf_formula = rf_formula)
sqrt_gr_test_obs <- c(obs_fold1_results[[1]], obs_fold2_results[[1]],
obs_fold3_results[[1]],
obs_fold4_results[[1]], obs_fold5_results[[1]])
gr_test_obs <- c(obs_fold1_results[[2]], obs_fold2_results[[2]],
obs_fold3_results[[2]],
obs_fold4_results[[2]], obs_fold5_results[[2]])
rf_gr_test_obs <- c(obs_fold1_results[[3]], obs_fold2_results[[3]],
obs_fold3_results[[3]],
obs_fold4_results[[3]], obs_fold5_results[[3]])
og_sqrt_preds_obs <- c(obs_fold1_results[[4]], obs_fold2_results[[4]],
obs_fold3_results[[4]],
obs_fold4_results[[4]], obs_fold5_results[[4]])
new_sqrt_preds_obs <- c(obs_fold1_results[[5]], obs_fold2_results[[5]],
obs_fold3_results[[5]],
obs_fold4_results[[5]], obs_fold5_results[[5]])
og_gr_preds_obs <- c(obs_fold1_results[[6]], obs_fold2_results[[6]],
obs_fold3_results[[6]],
obs_fold4_results[[6]], obs_fold5_results[[6]])
new_gr_preds_obs <- c(obs_fold1_results[[7]], obs_fold2_results[[7]],
obs_fold3_results[[7]],
obs_fold4_results[[7]], obs_fold5_results[[7]])
rf_gr_preds_obs <- c(obs_fold1_results[[8]], obs_fold2_results[[8]],
obs_fold3_results[[8]],
obs_fold4_results[[8]], obs_fold5_results[[8]])
train_avg_obs <- c(obs_fold1_results[[9]], obs_fold2_results[[9]],
obs_fold3_results[[9]],
obs_fold4_results[[9]], obs_fold5_results[[9]])
#rmse(sqrt_gr_test, og_sqrt_preds)
#rmse(sqrt_gr_test[!is.na(new_sqrt_preds)], na.omit(new_sqrt_preds))
#median(abs(sqrt_gr_test - og_sqrt_preds))
#median(abs(sqrt_gr_test[!is.na(new_sqrt_preds)] - na.omit(new_sqrt_preds)))
rmse_null_obs <- Metrics::rmse(gr_test_obs, train_avg_obs)
rmse_og_obs <- Metrics::rmse(gr_test_obs, og_gr_preds_obs)
rmse_new_obs <- Metrics::rmse(gr_test_obs[!is.na(new_gr_preds_obs)],
na.omit(new_gr_preds_obs))
rmse_rf_obs <- Metrics::rmse(rf_gr_test_obs[!is.na(rf_gr_preds_obs)],
na.omit(rf_gr_preds_obs))
mdae_null_obs <- stats::median(abs((gr_test_obs - train_avg_obs)))
mdae_og_obs <- stats::median(abs((gr_test_obs - og_gr_preds_obs)))
mdae_new_obs <- stats::median(abs((gr_test_obs[!is.na(new_gr_preds_obs)] -
na.omit(new_gr_preds_obs))))
mdae_rf_obs <- stats::median(abs((rf_gr_test_obs[!is.na(rf_gr_preds_obs)] -
na.omit(rf_gr_preds_obs))))
results <- c(rmse_null, rmse_og_build, rmse_new_build, rmse_rf_build,
mdae_null_build, mdae_og_build, mdae_new_build, mdae_rf_build,
rmse_null_obs, rmse_og_obs, rmse_new_obs, rmse_rf_obs,
mdae_null_obs, mdae_og_obs, mdae_new_obs, mdae_rf_obs)
names(results) <- c("Null model RMSE buildings",
"Original model rmse buildings",
"New Model rmse builings",
"Random Forest RMSE buildings",
"Null model med abs error buildings",
"Original model med abs error buildings",
"New Model med abs erroor builings",
"Random Forest med abd error buildings",
"Null Model RMSE obs",
"Original model rmse obs",
"New Model rmse obs",
"Random Forest RMSE obs",
"Null model median abd error obs",
"Original model med abs error obs",
"New Model med abs erroor obs",
"Random Forest med abd error obs")
results
}
data <- read.csv("data-raw/gr_model_data.csv")
formula1 = "sqrtgr ~ logground"
formula2 = "sqrtgr ~ logground + roofflat*Exposure +
roofflat*winter_wind +
log(Size) + temp_avg + Heated + Parapet"
rf_formula = gr ~ ground_max + roofflat + Exposure +
winter_wind + Size + temp_avg + Heated + Parapet
## setting each building as being in fold 1-k
building_nums <- sample(rep_len(seq_len(k),
length(unique(data$building_code))))
# putting numbers to building codes
test_build <- train_data <- test_data <-
fold_results <- vector("list", k)
for(i in seq_len(k)){
test_build[[i]] <- unique(data$building_code)[building_nums == i]
train_data[[i]] <- data[!(data$building_code %in% test_build[[i]]),]
test_data[[i]] <- data[data$building_code %in% test_build[[i]],]
fold_results[[i]] <- gr_cv(train_data1[[i]], test_data[[i]],
formula1 = formula1,
forumula2 = formula2,
rf_formula = rf_formula)
}
for(i in seq_len(k)){
test_build[[i]] <- unique(data$building_code)[building_nums == i]
train_data[[i]] <- data[!(data$building_code %in% test_build[[i]]),]
test_data[[i]] <- data[data$building_code %in% test_build[[i]],]
fold_results[[i]] <- gr_cv(train_data[[i]], test_data[[i]],
formula1 = formula1,
forumula2 = formula2,
rf_formula = rf_formula)
}
devtools::document()
acc_test(data = data)[1:4]
train_data[[1]]
View(train_data[[1]])
devtools::document()
acc_test(data = data)[1:4]
devtools::document()
acc_test(data = data)[1:4]
getwd()
devtools::document()
devtools::load_all()
acc_test(data = data)[1:4]
devtools::document()
devtools::document()
acc_test(data = data)[1:4]
data <- read.csv("data-raw/gr_model_data.csv")
acc_test(data = data)[1:4]
k = 5
formula1 = "sqrtgr ~ logground"
formula2 = "sqrtgr ~ logground + roofflat*Exposure +
roofflat*winter_wind +
log(Size) + temp_avg + Heated + Parapet"
rf_formula = gr ~ ground_max + roofflat + Exposure +
winter_wind + Size + temp_avg + Heated + Parapet
## setting each building as being in fold 1-k
building_nums <- sample(rep_len(seq_len(k),
length(unique(data$building_code))))
# putting numbers to building codes
test_build <- train_data <- test_data <-
fold_results <- vector("list", k)
for(i in seq_len(k)){
test_build[[i]] <- unique(data$building_code)[building_nums == i]
train_data[[i]] <- data[!(data$building_code %in% test_build[[i]]),]
test_data[[i]] <- data[data$building_code %in% test_build[[i]],]
fold_results[[i]] <- gr_cv(train_data[[i]], test_data[[i]],
formula1 = formula1,
forumula2 = formula2,
rf_formula = rf_formula)
}
fold_results
fold_results[1]
fold_results[[1]]
fold_results[1][1]
fold_results[1][2]
fold_results[[1]]
fold_results[[1]][2]
fold_results[[1]][3]
fold_results[[1:5]][3]
combined_vector <- unlist(lapply(fold_results, function(sub_list) sub_list[[1]]))
fold_results[[1:5]][1]
fold_results[[1][1]
fold_results[[1]][1]
combined_vector
fold_results[[1]][2]
combined_vector
fold_results[[2]][1]
combined_vector
?unlist
devtools::document()
acc_test(data = data)[1:4]
devtools::document()
acc_test(data = data)[1:4]
devtools::document()
acc_test(data = data)[1:4]
set.seed(123)
acc_test(data = data)[1:4]
set.seed(1234)
acc_test(data = data)[1:4]
train_avg <- unlist(lapply(fold_results, function(sub_list) sub_list[[9]]))
tail(train_avg)
tail(fold_results[[5]][9])
rf_gr_preds <- unlist(lapply(fold_results, function(sub_list) sub_list[[8]]))
tail(rf_gr_preds)
tail(fold_results[[5]][8])
acc_test(data = data)[1:4]
test_build[[1]]
devtools::document()
acc_test(data = data)[1:4]
devtools::document()
devtools::load_all()
acc_test(data = data)[1:4]
data <- read.csv("data-raw/gr_model_data.csv")
set.seed(1234)
acc_test(data = data)[1:4]
devtools::document()
data <- read.csv("data-raw/gr_model_data.csv")
set.seed(1234)
acc_test(data = data)[1:4]
devtools::document()
devtools::load_all()
data <- read.csv("data-raw/gr_model_data.csv")
set.seed(1234)
acc_test(data = data)[1:4]
data <- read.csv("data-raw/gr_model_data.csv")
set.seed(1234)
acc_test(data = data)[1:4]
devtools::document()
data <- read.csv("data-raw/gr_model_data.csv")
set.seed(1234)
acc_test(data = data)[1:4]
devtools::document()
data <- read.csv("data-raw/gr_model_data.csv")
set.seed(1234)
acc_test(data = data)[1:4]
k = 5
formula1 = "sqrtgr ~ logground"
formula2 = "sqrtgr ~ logground + roofflat*Exposure +
roofflat*winter_wind +
log(Size) + temp_avg + Heated + Parapet"
rf_formula = gr ~ ground_max + roofflat + Exposure +
winter_wind + Size + temp_avg + Heated + Parapet
## setting each building as being in fold 1-k
building_nums <- sample(rep_len(seq_len(k),
length(unique(data$building_code))))
building_nums
# putting numbers to building codes
test_build <- train_data <- test_data <-
fold_results <- vector("list", k)
for(i in seq_len(k)){
test_build[[i]] <- unique(data$building_code)[building_nums == i]
train_data[[i]] <- data[!(data$building_code %in% test_build[[i]]),]
test_data[[i]] <- data[data$building_code %in% test_build[[i]],]
fold_results[[i]] <- gr_cv(train_data[[i]], test_data[[i]],
formula1 = formula1,
forumula2 = formula2,
rf_formula = rf_formula)
}
View(test_build[[1]])
View(test_build[1])
View(test_data[[1]])
View(train_data[[1]]
)
View(test_build[[1]])
test_build[[1]]
unique(data$building_code)
length(unique(data$building_code))
16*5
devtools::document()
data <- read.csv("data-raw/gr_model_data.csv")
set.seed(1234)
acc_test(data = data)[1:4]
set.seed(123)
acc_test(data = data)[1:4]
?list
?vector
x <- vector()
x
x <- c()
x
x[1] = 2
x
x[2] = 1
x
devtools::document()
data <- read.csv("data-raw/gr_model_data.csv")
set.seed(123)
acc_test(data = data)[1:4]
devtools::document()
data <- read.csv("data-raw/gr_model_data.csv")
set.seed(123)
acc_test(data = data)[1:4]
devtools::document()
devtools::document()
devtools::document()
data <- read.csv("data-raw/gr_model_data.csv")
set.seed(123)
acc_test(data = data)
devtools::document()
acc_test(data = data)
devtools::document()
acc_test(data = data)
devtools::document()
data <- read.csv("data-raw/gr_model_data.csv")
set.seed(123)
acc_test(data = data)
dim(acc_test(data = data))
formula1 = "sqrtgr ~ logground"
formula2 = "sqrtgr ~ logground + roofflat*Exposure +
roofflat*winter_wind +
log(Size) + temp_avg + Heated + Parapet"
rf_formula = gr ~ ground_max + roofflat + Exposure +
winter_wind + Size + temp_avg + Heated + Parapet
## setting each building as being in fold 1-k
building_nums <- sample(rep_len(seq_len(k),
length(unique(data$building_code))))
k = 5
## setting each building as being in fold 1-k
building_nums <- sample(rep_len(seq_len(k),
length(unique(data$building_code))))
# putting numbers to building codes
test_build <- train_data <- test_data <-
fold_results <- vector("list", k)
for(i in seq_len(k)){
test_build[[i]] <- unique(data$building_code)[building_nums == i]
train_data[[i]] <- data[!(data$building_code %in% test_build[[i]]),]
test_data[[i]] <- data[data$building_code %in% test_build[[i]],]
fold_results[[i]] <- gr_cv(train_data[[i]], test_data[[i]],
formula1 = formula1,
forumula2 = formula2,
rf_formula = rf_formula)
}
results_builings <- list()
for (i in 1:8){
results_builings[[i]] <-
unlist(lapply(fold_results, function(sub_list) sub_list[[i]]))
}
rmse_buildings <- c()
for(i in seq_len(4)){
rmse_buildings[i] <-
Metrics::rmse(results_builings[[2]][!is.na(results_builings[[i+4]])],
na.omit(results_builings[[i+4]]))
}
rmse_buildings
set.seed(123)
## setting each building as being in fold 1-k
building_nums <- sample(rep_len(seq_len(k),
length(unique(data$building_code))))
# putting numbers to building codes
test_build <- train_data <- test_data <-
fold_results <- vector("list", k)
for(i in seq_len(k)){
test_build[[i]] <- unique(data$building_code)[building_nums == i]
train_data[[i]] <- data[!(data$building_code %in% test_build[[i]]),]
test_data[[i]] <- data[data$building_code %in% test_build[[i]],]
fold_results[[i]] <- gr_cv(train_data[[i]], test_data[[i]],
formula1 = formula1,
forumula2 = formula2,
rf_formula = rf_formula)
}
rmse_buildings
0.2672859                     0.2519807                     0.2110922                     0.2235877
results_builings[[1]]
results_builings[[2]]
0.2672859                     0.2519807                     0.2110922                     0.2235877
unlist(lapply(fold_results, function(sub_list) sub_list[[2]]))
results_builings <- list()
for (i in 1:8){
results_builings[[i]] <-
unlist(lapply(fold_results, function(sub_list) sub_list[[i]]))
}
results_builings[[2]]
unlist(lapply(fold_results, function(sub_list) sub_list[[2]]))
set.seed(123)
0.2672859                     0.2519807                     0.2110922                     0.2235877
devtools::document()
set.seed(123)
acc_test(data = data)
set.seed(123)
## setting each building as being in fold 1-k
building_nums <- sample(rep_len(seq_len(k),
length(unique(data$building_code))))
# putting numbers to building codes
test_build <- train_data <- test_data <-
fold_results <- vector("list", k)
for(i in seq_len(k)){
test_build[[i]] <- unique(data$building_code)[building_nums == i]
train_data[[i]] <- data[!(data$building_code %in% test_build[[i]]),]
test_data[[i]] <- data[data$building_code %in% test_build[[i]],]
fold_results[[i]] <- gr_cv(train_data[[i]], test_data[[i]],
formula1 = formula1,
forumula2 = formula2,
rf_formula = rf_formula)
}
results_builings <- list()
for (i in 1:8){
results_builings[[i]] <-
unlist(lapply(fold_results, function(sub_list) sub_list[[i]]))
}
unlist(lapply(fold_results, function(sub_list) sub_list[[2]]))
results_builings[[2]]
rmse_buildings <- c()
rmse_buildings
for(i in seq_len(4)){
rmse_buildings[i] <-
Metrics::rmse(results_builings[[2]][!is.na(results_builings[[i+4]])],
na.omit(results_builings[[i+4]]))
}
rmse_buildings
0.2672859                     0.2519807                     0.2110922                     0.2235877
mdae_buildings <- c()
for(i in seq_len(4)){
stats::median(abs((results_builings[[2]][!is.na(results_builings[[i+4]])] -
na.omit(results_builings[[i+4]]))))
}
mdae_buildings
for(i in seq_len(4)){
stats::median(abs((results_builings[[2]][!is.na(results_builings[[i+4]])] -
na.omit(results_builings[[i+4]]))))
}
mdae_buildings
devtools::document()
acc_test(data = data)
set.seed(123)
acc_test(data = data)
set.seed(123)
## setting each building as being in fold 1-k
building_nums <- sample(rep_len(seq_len(k),
length(unique(data$building_code))))
# putting numbers to building codes
test_build <- train_data <- test_data <-
fold_results <- vector("list", k)
for(i in seq_len(k)){
test_build[[i]] <- unique(data$building_code)[building_nums == i]
train_data[[i]] <- data[!(data$building_code %in% test_build[[i]]),]
test_data[[i]] <- data[data$building_code %in% test_build[[i]],]
fold_results[[i]] <- gr_cv(train_data[[i]], test_data[[i]],
formula1 = formula1,
forumula2 = formula2,
rf_formula = rf_formula)
}
results_builings <- list()
for (i in 1:8){
results_builings[[i]] <-
unlist(lapply(fold_results, function(sub_list) sub_list[[i]]))
}
rmse_buildings <- c()
for(i in seq_len(4)){
rmse_buildings[i] <-
Metrics::rmse(results_builings[[2]][!is.na(results_builings[[i+4]])],
na.omit(results_builings[[i+4]]))
}
rmse_buildings
0.2672859                     0.2519807                     0.2110922                     0.2235877
mdae_buildings <- c()
for(i in seq_len(4)){
mdae_buildings[i] <-
stats::median(abs((results_builings[[2]][!is.na(results_builings[[i+4]])]
- na.omit(results_builings[[i+4]]))))
}
mdae_buildings
# Partitioning based on observations
## setting each observation as being in fold 1-5
obs_nums <- sample(rep_len(seq_len(k),nrow(data)))
test_obs <- obs_train_data <- obs_test_data <-
obs_fold_results <- vector("list", k)
for(i in seq_len(k)){
obs_train_data[[i]] <- data[obs_nums != i,]
obs_test_data[[i]] <- data[obs_nums == i,]
obs_fold_results[[i]] <- gr_cv(obs_train_data[[i]], obs_test_data[[i]],
formula1 = formula1,
forumula2 = formula2,
rf_formula = rf_formula)
}
results_obs <- list()
for (i in 1:8){
results_obs[[i]] <-
unlist(lapply(obs_fold_results, function(sub_list) sub_list[[i]]))
}
rmse_obs <- c()
for(i in seq_len(4)){
rmse_obs[i] <-
Metrics::rmse(results_obs[[2]][!is.na(results_obs[[i+4]])],
na.omit(results_obs[[i+4]]))
}
rmse_obs
devtools::document()
acc_test(data = data)
devtools::document()
set.seed(123)
acc_test(data = data)
