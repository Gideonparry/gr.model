acc_test(data = data, seed = 123)
acc_test(data = data, seed = 1234)
set.seed(1234)
building_nums <- sample(rep_len(1:5,length(unique(data$building_code))))
# putting numbers to building codes
test_build1 <- unique(data$building_code)[building_nums == 1]
test_build2 <- unique(data$building_code)[building_nums == 2]
test_build3 <- unique(data$building_code)[building_nums == 2]
test_build4 <- unique(data$building_code)[building_nums == 4]
test_build5 <- unique(data$building_code)[building_nums == 5]
## making train and test data based on each fold
train_data1 <- data[!(data$building_code %in% test_build1),]
test_data1 <- data[data$building_code %in% test_build1,]
train_data2 <- data[!(data$building_code %in% test_build2),]
test_data2 <- data[data$building_code %in% test_build2,]
train_data3 <- data[!(data$building_code %in% test_build3),]
test_data3 <- data[data$building_code %in% test_build3,]
train_data4 <- data[!(data$building_code %in% test_build4),]
test_data4 <- data[data$building_code %in% test_build4,]
train_data5 <- data[!(data$building_code %in% test_build5),]
test_data5 <- data[data$building_code %in% test_build5,]
fold1_results <- gr_cv(train_data1, test_data1,
formula1 = formula1,
forumula2 = formula2,
tree_vars = tree_vars,
rf_y = rf_y)
data <- read.csv("C:\\Users\\bean_student\\Documents\\gr_model_data.csv")
devtools::load_all()
formula1 = "sqrtgr ~ logground",
formula1 = "sqrtgr ~ logground"
formula2 = "sqrtgr ~ logground + roofflat*Exposure +
roofflat*winter_wind +
log(Size) + temp_avg + Heated + Parapet
tree_vars = c(7, 11, 13, 19:22, 25:27, 33, 35)
formula2 = "sqrtgr ~ logground + roofflat*Exposure +
formula1 = "sqrtgr ~ logground"
formula2 = "sqrtgr ~ logground + roofflat*Exposure +
roofflat*winter_wind +
log(Size) + temp_avg + Heated + Parapet"
tree_vars = c(7, 11, 13, 19:22, 25:27, 33, 35)
set.seed(1234)
building_nums <- sample(rep_len(1:5,length(unique(data$building_code))))
# putting numbers to building codes
test_build1 <- unique(data$building_code)[building_nums == 1]
test_build2 <- unique(data$building_code)[building_nums == 2]
test_build3 <- unique(data$building_code)[building_nums == 2]
test_build4 <- unique(data$building_code)[building_nums == 4]
test_build5 <- unique(data$building_code)[building_nums == 5]
## making train and test data based on each fold
train_data1 <- data[!(data$building_code %in% test_build1),]
test_data1 <- data[data$building_code %in% test_build1,]
train_data2 <- data[!(data$building_code %in% test_build2),]
test_data2 <- data[data$building_code %in% test_build2,]
train_data3 <- data[!(data$building_code %in% test_build3),]
test_data3 <- data[data$building_code %in% test_build3,]
train_data4 <- data[!(data$building_code %in% test_build4),]
test_data4 <- data[data$building_code %in% test_build4,]
train_data5 <- data[!(data$building_code %in% test_build5),]
test_data5 <- data[data$building_code %in% test_build5,]
fold1_results <- gr_cv(train_data1, test_data1,
formula1 = formula1,
forumula2 = formula2,
tree_vars = tree_vars,
rf_y = rf_y)
fold2_results <- gr_cv(train_data2, test_data2,
formula1 = formula1,
forumula2 = formula2,
tree_vars = tree_vars,
rf_y = rf_y)
fold3_results <- gr_cv(train_data3, test_data3,
formula1 = formula1,
forumula2 = formula2,
tree_vars = tree_vars,
rf_y = rf_y)
fold4_results <- gr_cv(train_data4, test_data4,
formula1 = formula1,
forumula2 = formula2,
tree_vars = tree_vars,
rf_y = rf_y)
fold5_results <- gr_cv(train_data5, test_data5,
formula1 = formula1,
forumula2 = formula2,
tree_vars = tree_vars,
rf_y = rf_y)
sqrt_gr_test <- c(fold1_results[[1]], fold2_results[[1]], fold3_results[[1]],
fold4_results[[1]], fold5_results[[1]])
gr_test <- c(fold1_results[[2]], fold2_results[[2]], fold3_results[[2]],
fold4_results[[2]], fold5_results[[2]])
rf_gr_test <- c(fold1_results[[3]], fold2_results[[3]], fold3_results[[3]],
fold4_results[[3]], fold5_results[[3]])
og_sqrt_preds <- c(fold1_results[[4]], fold2_results[[4]], fold3_results[[4]],
fold4_results[[4]], fold5_results[[4]])
new_sqrt_preds <- c(fold1_results[[5]], fold2_results[[5]], fold3_results[[5]],
fold4_results[[5]], fold5_results[[5]])
og_gr_preds <- c(fold1_results[[6]], fold2_results[[6]], fold3_results[[6]],
fold4_results[[6]], fold5_results[[6]])
new_gr_preds <- c(fold1_results[[7]], fold2_results[[7]], fold3_results[[7]],
fold4_results[[7]], fold5_results[[7]])
rf_gr_preds <- c(fold1_results[[8]], fold2_results[[8]], fold3_results[[8]],
fold4_results[[8]], fold5_results[[8]])
train_avg <- c(fold1_results[[9]], fold2_results[[9]], fold3_results[[9]],
fold4_results[[9]], fold5_results[[9]])
# rmse(sqrt_gr_test, og_sqrt_preds)
#rmse(sqrt_gr_test[!is.na(new_sqrt_preds)], na.omit(new_sqrt_preds))
#median(abs(sqrt_gr_test - og_sqrt_preds))
#median(abs(sqrt_gr_test[!is.na(new_sqrt_preds)] - na.omit(new_sqrt_preds)))
rmse_null <- Metrics::rmse(gr_test, train_avg)
rmse_og_build <- Metrics::rmse(gr_test, og_gr_preds)
rmse_new_build <- Metrics::rmse(gr_test[!is.na(new_gr_preds)],
na.omit(new_gr_preds))
rmse_rf_build <- Metrics::rmse(rf_gr_test, rf_gr_preds)
mdae_null_build <- stats::median(abs((gr_test - train_avg)))
mdae_og_build <- stats::median(abs((gr_test - og_gr_preds)))
mdae_new_build <- stats::median(abs((gr_test[!is.na(new_gr_preds)] -
na.omit(new_gr_preds))))
mdae_rf_build <- stats::median(abs((rf_gr_test - rf_gr_preds)))
# Partitioning based on observations
## setting each observation as being in fold 1-5
obs_nums <- sample(rep_len(1:5,nrow(data)))
obs_train_data1 <- data[obs_nums != 1,]
obs_test_data1 <- data[obs_nums == 1,]
obs_train_data2 <- data[obs_nums != 2,]
obs_test_data2 <- data[obs_nums == 2,]
obs_train_data3 <- data[obs_nums != 3,]
obs_test_data3 <- data[obs_nums == 3,]
obs_train_data4 <- data[obs_nums != 4,]
obs_test_data4 <- data[obs_nums == 4,]
obs_train_data5 <- data[obs_nums != 5,]
obs_test_data5 <- data[obs_nums == 5,]
obs_fold1_results <- gr_cv(obs_train_data1, obs_test_data1)
obs_fold2_results <- gr_cv(obs_train_data2, obs_test_data2)
obs_fold3_results <- gr_cv(obs_train_data3, obs_test_data3)
obs_fold4_results <- gr_cv(obs_train_data4, obs_test_data4)
obs_fold5_results <- gr_cv(obs_train_data5, obs_test_data5)
sqrt_gr_test_obs <- c(obs_fold1_results[[1]], obs_fold2_results[[1]],
obs_fold3_results[[1]],
obs_fold4_results[[1]], obs_fold5_results[[1]])
gr_test_obs <- c(obs_fold1_results[[2]], obs_fold2_results[[2]],
obs_fold3_results[[2]],
obs_fold4_results[[2]], obs_fold5_results[[2]])
rf_gr_test_obs <- c(obs_fold1_results[[3]], obs_fold2_results[[3]],
obs_fold3_results[[3]],
obs_fold4_results[[3]], obs_fold5_results[[3]])
og_sqrt_preds_obs <- c(obs_fold1_results[[4]], obs_fold2_results[[4]],
obs_fold3_results[[4]],
obs_fold4_results[[4]], obs_fold5_results[[4]])
new_sqrt_preds_obs <- c(obs_fold1_results[[5]], obs_fold2_results[[5]],
obs_fold3_results[[5]],
obs_fold4_results[[5]], obs_fold5_results[[5]])
og_gr_preds_obs <- c(obs_fold1_results[[6]], obs_fold2_results[[6]],
obs_fold3_results[[6]],
obs_fold4_results[[6]], obs_fold5_results[[6]])
new_gr_preds_obs <- c(obs_fold1_results[[7]], obs_fold2_results[[7]],
obs_fold3_results[[7]],
obs_fold4_results[[7]], obs_fold5_results[[7]])
rf_gr_preds_obs <- c(obs_fold1_results[[8]], obs_fold2_results[[8]],
obs_fold3_results[[8]],
obs_fold4_results[[8]], obs_fold5_results[[8]])
train_avg_obs <- c(obs_fold1_results[[9]], obs_fold2_results[[9]],
obs_fold3_results[[9]],
obs_fold4_results[[9]], obs_fold5_results[[9]])
#rmse(sqrt_gr_test, og_sqrt_preds)
#rmse(sqrt_gr_test[!is.na(new_sqrt_preds)], na.omit(new_sqrt_preds))
#median(abs(sqrt_gr_test - og_sqrt_preds))
#median(abs(sqrt_gr_test[!is.na(new_sqrt_preds)] - na.omit(new_sqrt_preds)))
rmse_null_obs <- Metrics::rmse(gr_test_obs, train_avg_obs)
rmse_og_obs <- Metrics::rmse(gr_test_obs, og_gr_preds_obs)
rmse_new_obs <- Metrics::rmse(gr_test_obs[!is.na(new_gr_preds_obs)],
na.omit(new_gr_preds_obs))
rmse_rf_obs <- Metrics::rmse(rf_gr_test_obs, rf_gr_preds_obs)
mdae_null_obs <- stats::median(abs((gr_test_obs - train_avg_obs)))
mdae_og_obs <- stats::median(abs((gr_test_obs - og_gr_preds_obs)))
mdae_new_obs <- stats::median(abs((gr_test_obs[!is.na(new_gr_preds_obs)] -
na.omit(new_gr_preds_obs))))
mdae_rf_obs <- stats::median(abs((rf_gr_test_obs - rf_gr_preds_obs)))
rmse_new_obs
acc_test(data = data, seed = 123)
devtools::load_all()
acc_test(data = data, seed = 123)
data <- read.csv("C:\\Users\\bean_student\\Documents\\gr_model_data.csv")
acc_test(data = data, seed = 123)
acc_test(data = data, seed = 1234)
acc_test(data = data, seed = 123)
acc_test(data = data, seed = 1234)
acc_test(data = data, seed = 123)
unname(acc_test(data = data, seed = 123))
length(acc_test(data = data, seed = 123))
acc_test(data = data, seed = 123)[1:4]
acc_test(data = data, seed = 123)[5:8]
acc_test(data = data, seed = 123)[9:12]
acc_test(data = data, seed = 123)[13:16]
acc_test(data = data, seed = 1234)[1:4]
acc_test(data = data, seed = 1234)[5:8]
acc_test(data = data, seed = 1234)[9:12]
acc_test(data = data, seed = 1234)[13:16]
acc_test(data = data, seed = 2319)[1:4]
acc_test(data = data, seed = 2319)[5:8]
acc_test(data = data, seed = 2319)[9:12]
acc_test(data = data, seed = 2319)[13:16]
acc_test(data = data, seed = 123,
formula2 = "sqrtgr ~ logground + roofflat*Exposure +
roofflat*winter_wind +
log(Size) + temp_avg + Parapet")[c(3,7,11,15)]
acc_test(data = data, seed = 1234,
formula2 = "sqrtgr ~ logground + roofflat*Exposure +
roofflat*winter_wind +
log(Size) + temp_avg + Parapet")[c(3,7,11,15)]
acc_test(data = data, seed = 2319,
formula2 = "sqrtgr ~ logground + roofflat*Exposure +
roofflat*winter_wind +
log(Size) + temp_avg + Parapet")[c(3,7,11,15)]
## No building info
acc_test(data = data, seed = 123,
formula2 = "sqrtgr ~ logground +
winter_wind +
temp_avg")[c(3,7,11,15)]
acc_test(data = data, seed = 1234,
formula2 = "sqrtgr ~ logground +
winter_wind +
temp_avgt")[c(3,7,11,15)]
acc_test(data = data, seed = 1234,
formula2 = "sqrtgr ~ logground +
winter_wind +
temp_avg")[c(3,7,11,15)]
acc_test(data = data, seed = 2319,
formula2 = "sqrtgr ~ logground +
rwinter_wind +
temp_avg")[c(3,7,11,15)]
acc_test(data = data, seed = 2319,
formula2 = "sqrtgr ~ logground +
winter_wind +
temp_avg")[c(3,7,11,15)]
## No building info
acc_test(data = data, seed = 123,
formula2 = "sqrtgr ~ logground +
winter_wind +
temp_avg")[c(3,7,11,15)]
acc_test(data = data, seed = 1234,
formula2 = "sqrtgr ~ logground +
winter_wind +
temp_avg")[c(3,7,11,15)]
acc_test(data = data, seed = 2319,
formula2 = "sqrtgr ~ logground +
winter_wind +
temp_avg")[c(3,7,11,15)]
## drop heated/flat
acc_test(data = data, seed = 123,
formula2 = "sqrtgr ~ logground + Exposure +
winter_wind +
log(Size) + temp_avg + Parapet")[c(3,7,11,15)]
acc_test(data = data, seed = 1234,
formula2 = "sqrtgr ~ logground + Exposure +
winter_wind +
log(Size) + temp_avg + Parapet")[c(3,7,11,15)]
acc_test(data = data, seed = 2319,
formula2 = "sqrtgr ~ logground + Exposure +
winter_wind +
log(Size) + temp_avg + Parapet")[c(3,7,11,15)]
## keep flat drop interaction
acc_test(data = data, seed = 123,
formula2 = "sqrtgr ~ logground + roofflat + Exposure +
winter_wind +
log(Size) + temp_avg + Parapet")[c(3,7,11,15)]
acc_test(data = data, seed = 1234,
formula2 = "sqrtgr ~ logground + roofflat + Exposure +
winter_wind +
log(Size) + temp_avg + Parapet")[c(3,7,11,15)]
acc_test(data = data, seed = 2319,
formula2 = "sqrtgr ~ logground + roofflat + Exposure +
winter_wind +
log(Size) + temp_avg + Parapet")[c(3,7,11,15)]
data <- read.csv("C:\\Users\\bean_student\\Documents\\GraphData\\complete_data.csv")
metadata <- read.csv("C:\\Users\\bean_student\\Documents\\GraphData\\gr_meta_ca_all.csv")
data$season <- rep(NA, nrow(data))
data$date <- as.Date(data$date)
## try assumption of 1 for missing exposure, 0 for heated, insulated and parpaet
data$season <- ifelse((data$date > as.Date("1957-07-01") &
data$date < as.Date("1958-07-01")), 2, data$season)
data$season <- ifelse((data$date > as.Date("1958-07-01") &
data$date < as.Date("1959-07-01")), 3, data$season)
data$season <- ifelse((data$date > as.Date("1959-07-01") &
data$date < as.Date("1960-07-01")), 4, data$season)
data$season <- ifelse((data$date > as.Date("1960-07-01") &
data$date < as.Date("1961-07-01")), 5, data$season)
data$season <- ifelse((data$date > as.Date("1961-07-01") &
data$date < as.Date("1962-07-01")), 6, data$season)
data$season <- ifelse((data$date > as.Date("1962-07-01") &
data$date < as.Date("1963-07-01")), 7, data$season)
data$season <- ifelse((data$date > as.Date("1963-07-01") &
data$date < as.Date("1964-07-01")), 8, data$season)
data$season <- ifelse((data$date > as.Date("1964-07-01") &
data$date < as.Date("1965-07-01")), 9, data$season)
data$season <- ifelse((data$date > as.Date("1965-07-01") &
data$date < as.Date("1966-07-01")), 10, data$season)
data$season <- ifelse((data$date > as.Date("1966-07-01") &
data$date < as.Date("1967-07-01")), 11, data$season)
################# summarise by building code and season #####################
library(dplyr)
ground_max <- data %>%
group_by(building_code, city_code, season) %>%
filter(measurement == "ground") %>%
summarise(ground_max = max(value))
roof_max <- data %>%
group_by(building_code, city_code, season) %>%
filter(mma == "avg") %>%
summarise(roof_max = max(value))
gr_data <- inner_join(ground_max, roof_max, by = c("building_code", "city_code",
"season"))
gr_data$gr <- gr_data$roof_max / gr_data$ground_max
### filtering out the arch hangars
arch_hangars <- c("clab02", "cxbc02", "nbon02", "oton07", "wnmb04")
gr_data2 <- gr_data %>%
filter(!(building_code %in% arch_hangars))
nrow(gr_data)
nrow(gr_data2)
### reporducing linear model
gr_data2$sqrtgr <- sqrt(gr_data2$gr)
gr_data2$logground <- log(gr_data2$ground_max)
model <- lm(sqrtgr ~ logground, data = gr_data2)
summary(model)
#### getting average wind and temps
wind_avgs <-  data %>%
group_by(city_code, season, measurement) %>%
filter(measurement == "wind") %>%
summarise(wind_avg = mean(value))
temp_avgs <-  data %>%
group_by(city_code, season, measurement) %>%
filter(measurement == "temp") %>%
summarise(temp_avg = mean(value))
nrow(wind_avgs)
nrow(temp_avgs)
gr_data3 <- left_join(gr_data2, wind_avgs, by = c("city_code", "season"))
gr_data_weather <- left_join(gr_data3, temp_avgs, by = c("city_code", "season"))
gr_data_weather$sqrtgr <- sqrt(gr_data_weather$gr)
gr_data_weather$logground <- log(gr_data_weather$ground_max)
model <- lm(sqrtgr ~ logground, data = gr_data_weather)
summary(model)
model2 <- lm(sqrtgr ~ logground + wind_avg + temp_avg, gr_data_weather)
summary(model2)
pairs(gr_data_weather[,c(7,8,10,12)])
gr_all <- inner_join(gr_data_weather, metadata, by = c("building_code", "city_code"))
gr_all$roofflat <- ifelse(gr_all$Roof_Type == "Flat" , 1, 0)
model3 <- lm(sqrtgr ~ logground + wind_avg + temp_avg + roofflat +
Exposure + Heated + Insulated + lat + long, gr_all)
summary(model3)
min(na.omit(gr_all$wind_avg))
################# other ways to do weather ##################################
above_freeze <-  data %>%
group_by(city_code, measurement, season) %>%
filter(measurement == "temp") %>%
summarise(above_freeze = sum(value > 32)/length(value))
### percentage days wind speed is over 10
winter_wind <-  data %>%
group_by(city_code, measurement, season) %>%
filter(measurement == "wind") %>%
summarise(winter_wind = sum(value > 10)/length(value))
gr_total <- inner_join(gr_all, winter_wind, by = c("city_code", "season")) %>%
inner_join(above_freeze, by = c("city_code", "season"))
## doing og model with remaining dataprp
model1 <- lm(sqrtgr ~ logground, gr_total)
summary(model1)
gr_total$residual <- residuals(model1)
# Not taking size of parapet into account, just if it's there or not
gr_total$Parapet <- ifelse(gr_total$Parapet > 0, 1, 0)
#### models to predict residual
model4 <- lm(residual ~ winter_wind + above_freeze, gr_total)
summary(model4)
# adjusted R^2 0.06935
model5 <- lm(residual ~ wind_avg + temp_avg, gr_total)
summary(model5)
# adjusted R^2 0.04645
model6 <- lm(residual ~ winter_wind + temp_avg, gr_total)
summary(model6)
# adjusted R^2 0.09431
model7 <- lm(residual ~ wind_avg + above_freeze, gr_total)
summary(model7)
# adjusted R^2 0.05321
resid_data <- gr_total[,c(10, 12, 19:21, 23:26, 28:30, 32, 34:35)]
resid_no_na <- na.omit(resid_data)
resid_all <- lm(residual ~ ., resid_no_na)
resid_int <- lm(residual ~ 1, resid_no_na)
resid_forward <- step(resid_int, direction='both', scope=formula(resid_all),
trace=0)
resid_backward <- step(resid_all, direction='both', scope=formula(resid_all),
trace=0)
summary(resid_backward)
summary(resid_forward)
colnames(gr_total)
## looking at tree for potential interactions
library(rpart)
library(rpart.plot)
tree <- rpart(formula = residual ~ roofflat + Exposure + winter_wind  +
Size + Heated + Parapet, data = resid_no_na)
prp(tree)
pruned_tree <- prune(tree, cp = 0.1)
prp(pruned_tree)
## looking at transformations
gr_vars <- gr_total[,c(7,8,30,23,32,28,20,24)]
pairs(gr_vars)
par(mfrow = c(2, 2))
plot(gr_vars$sqrtgr,(gr_vars$winter_wind))
plot(gr_vars$sqrtgr,log(gr_vars$winter_wind))
plot(gr_vars$sqrtgr,sqrt(gr_vars$winter_wind))
plot(gr_vars$sqrtgr,(gr_vars$winter_wind)^2)
## log appears to be the closest to linear.
### looking at size
par(mfrow = c(2, 2))
plot(gr_vars$sqrtgr,(gr_vars$Size))
plot(gr_vars$sqrtgr,log(gr_vars$Size))
plot(gr_vars$sqrtgr,sqrt(gr_vars$Size))
plot(gr_vars$sqrtgr,(gr_vars$Size)^2)
## again log looks best
## looking at lat
par(mfrow = c(2, 2))
plot(gr_vars$sqrtgr,(gr_vars$lat))
plot(gr_vars$sqrtgr,log(gr_vars$lat))
plot(gr_vars$sqrtgr,sqrt(gr_vars$lat))
plot(gr_vars$sqrtgr,(gr_vars$lat)^2)
par(mfrow = c(1, 1))
## these all look the same
## model with varibales suggested by forward regression
model8 <- lm(sqrtgr ~ logground + roofflat + Exposure + log(winter_wind) +
lat + log(Size) + Heated, gr_total)
summary(model8)
## transforming those varaibles and retrying step procedures
resid_transform <- resid_no_na
resid_transform$winter_wind <- log(resid_transform$winter_wind)
resid_transform$Size <- log(resid_transform$Size)
####### retrying step
resid_all2 <- lm(residual ~ ., resid_transform)
resid_int2 <- lm(residual ~ 1, resid_transform)
resid_forward2 <- step(resid_int2, direction='both', scope=formula(resid_all2),
trace=0)
resid_backward2 <- step(resid_all2, direction='both', scope=formula(resid_all2),
trace=0)
summary(resid_backward2)
summary(resid_forward2)
par(mfrow = c(1, 1))
plot(fitted(resid_forward2), resid(resid_forward2))
qqnorm(resid(resid_forward2), pch = 1, frame = FALSE)
qqline(resid(resid_forward2), col = "steelblue", lwd = 2)
# Size is odd. It looks like the big buildings highly influence the results,
# but then when we take the log of size their influence significantly diminishes
# Looking at tree with new suggestion
tree2 <- rpart(formula = residual ~ roofflat + Exposure + winter_wind + lat,
data = resid_transform)
prp(tree2)
## checking new suggested model
model9 <- lm(sqrtgr ~ logground + roofflat + Exposure + log(winter_wind) + lat,
data = gr_total)
summary(model9)
plot(fitted(model9), resid(model9))
qqnorm(resid(model9), pch = 1, frame = FALSE)
qqline(resid(model9), col = "steelblue", lwd = 2)
shapiro.test(resid(model9))
### looks ok other than a few outlier points
library(olsrr)
ols_plot_cooksd_chart(model9)
# 105, 302, 304, 158
ols_plot_resid_stand(model9)
# 105, 158, 33`, 324`
ols_plot_resid_lev(model9)
# 105, 158, 300, 302, 304
head(sort(resid(model9)))
head(sort(resid(model9),TRUE))
## removing big outliers
gr_total_no_out <- gr_total[-c(134, 187, 196, 360),]
model10 <- lm(sqrtgr ~ logground + roofflat + Exposure + log(winter_wind) + lat,
data = gr_total_no_out)
summary(model10)
plot(fitted(model10), resid(model10))
qqnorm(resid(model10), pch = 1, frame = FALSE)
qqline(resid(model10), col = "steelblue", lwd = 2)
shapiro.test(resid(model10))
## removing those 4 points seems to have done a lot for normality assumption
# On the very low end, residuals are all positive. Other than that I don't see
# much of a pattern
### no geography forward and backward
resid_no_geo <- resid_no_na[,-10:-11]
tree_resid <- rpart(formula = residual ~ roofflat + Exposure + winter_wind + temp_avg
+ Size + Heated, data = resid_no_na)
prp(tree_resid)
# roofflat and exposure could interact
resid_all3 <- lm(residual ~ . + roofflat*Exposure + roofflat*winter_wind,
resid_no_geo[resid_no_geo$residual <= 1,])
resid_int3 <- lm(residual ~ 1, resid_no_geo[resid_no_geo$residual <= 1,])
resid_forward3 <- step(resid_int3, direction='both', scope=formula(resid_all3),
trace=1)
### Exposure, flat and winter wind only
acc_test(data = data, seed = 123,
formula2 = "sqrtgr ~ logground + roofflat*Exposure +
roof_flat*winter_wind")[c(3,7,11,15)]
data <- read.csv("C:\\Users\\bean_student\\Documents\\gr_model_data.csv")
### Exposure, flat and winter wind only
acc_test(data = data, seed = 123,
formula2 = "sqrtgr ~ logground + roofflat*Exposure +
roof_flat*winter_wind")[c(3,7,11,15)]
### Exposure, flat and winter wind only
acc_test(data = data, seed = 123,
formula2 = "sqrtgr ~ logground + roofflat*Exposure +
roofflat*winter_wind")[c(3,7,11,15)]
acc_test(data = data, seed = 1234,
formula2 = "sqrtgr ~ logground + roofflat*Exposure +
roofflat*winter_wind")[c(3,7,11,15)]
acc_test(data = data, seed = 2319,
formula2 = "sqrtgr ~ logground + roofflat*Exposure +
roofflat*winter_wind")[c(3,7,11,15)]
colnames(data)
### rf with weather, exposure and flat
acc_test(data, 123, tree_vars = c(7,9,13,24,31,22))[c(4,8,12,16)]
acc_test(data, 1234, tree_vars = c(7,9,13,24,31,22))[c(4,8,12,16)]
acc_test(data, 2319, tree_vars = c(7,9,13,24,31,22))[c(4,8,12,16)]
